#!/usr/bin/env python3

import argparse
import pathlib
import sys
import pykwalify.core
import yaml

HEADER = """/* Autogenerated by keygen.py from
 *     {}
 * DO NOT EDIT
 */

#include <stdint.h>
"""

NETWORK_SCHEMA_PATH = str(
    pathlib.Path(__file__).parent.parent.parent
    / "scripts"
    / "schemas"
    / "network-schema.yml"
)
with open(NETWORK_SCHEMA_PATH, "r", encoding="utf-8") as f:
    network_schema = yaml.safe_load(f)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="keygen",
        description="Convert network key description to header",
        allow_abbrev=False,
    )
    parser.add_argument("--key", type=str, required=True, help="Path to key yaml file")
    args = parser.parse_args()

    with open(args.key, "r", encoding="utf-8") as f:
        key_info = yaml.safe_load(f)

    try:
        pykwalify.core.Core(source_data=key_info, schema_data=network_schema).validate()
    except pykwalify.errors.SchemaError as e:
        sys.exit(f"ERROR: Malformed section in file: {args.key}\n{e}")

    network_key_id = key_info["id"]
    network_key_val = key_info["key"]

    print(HEADER.format(args.key))
    print(f"#define INFUSE_NETWORK_KEY_ID 0x{network_key_id:06X}")
    print("")
    print("static const uint8_t infuse_network_key[] = {")
    for n in range(0, len(network_key_val), 8):
        print(
            "\t{},".format(
                ", ".join([f"0x{b:02x}" for b in network_key_val[n : n + 8]])
            )
        )
    print("};")
