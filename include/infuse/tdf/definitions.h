/**
 * @file
 * @brief Autogenerated TDF definitions
 * @copyright 2024 Embeint Inc
 * @author scripts/west_commands/cloudgen.py
 *
 * SPDX-License-Identifier: LicenseRef-Embeint
 */

#ifndef INFUSE_SDK_INCLUDE_INFUSE_TDF_DEFINITIONS_H_
#define INFUSE_SDK_INCLUDE_INFUSE_TDF_DEFINITIONS_H_

#include <stdint.h>

#include <zephyr/toolchain.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief Common TDF struct fields
 * @defgroup tdf_struct_definitions Common TDF struct fields
 * @{
 */

/* MCUboot semantic versioning struct */
struct tdf_struct_mcuboot_img_sem_ver {
	uint8_t major;
	uint8_t minor;
	uint16_t revision;
	uint32_t build_num;
} __packed;

/* Generic 3-axis sensor reading */
struct tdf_struct_xyz_16bit {
	int16_t x;
	int16_t y;
	int16_t z;
} __packed;

/* Geographic Coordinate System location */
struct tdf_struct_gcs_location {
	/* Latitude degrees (scale 1e7) */
	int32_t latitude;
	/* Longitude degrees (scale 1e7) */
	int32_t longitude;
	/* Height above reference ellipsoid (mm) */
	int32_t height;
} __packed;

/* LTE cell ID (Local) */
struct tdf_struct_lte_cell_id_local {
	/* E-UTRAN Cell ID */
	uint32_t eci;
	/* Tracking Area Code */
	uint16_t tac;
} __packed;

/* LTE cell ID (Global) */
struct tdf_struct_lte_cell_id_global {
	/* Mobile Country Code */
	uint16_t mcc;
	/* Mobile Network Code */
	uint16_t mnc;
	/* E-UTRAN Cell ID */
	uint32_t eci;
	/* Tracking Area Code */
	uint16_t tac;
} __packed;

/**
 * @}
 */

/**
 * @brief Builtin TDF Structure Definitions
 * @defgroup builtin_tdf_definitions TDF Structure Definitions
 * @{
 */

/* Common announcement packet */
struct tdf_announce {
	/* Unique application ID */
	uint32_t application;
	/* Running application version */
	struct tdf_struct_mcuboot_img_sem_ver version;
	/* Key-Value store reflect global CRC */
	uint32_t kv_crc;
	/* Logger blocks written */
	uint32_t blocks;
	/* Uptime in seconds */
	uint32_t uptime;
	/* Reboot counter */
	uint16_t reboots;
	/* Flags (BIT(0) == SD blocks) */
	uint8_t flags;
} __packed;

/* General battery state */
struct tdf_battery_state {
	/* Battery voltage (milliVolts) */
	uint32_t voltage_mv;
	/* Battery current (microamps) (Negative = discharging) */
	int32_t current_ua;
	/* State of charge (percent) */
	uint8_t soc;
} __packed;

/* Ambient temperature, pressure & humidity */
struct tdf_ambient_temp_pres_hum {
	/* Ambient temperature (millidegrees) */
	int32_t temperature;
	/* Atmospheric pressure (pascals) */
	uint32_t pressure;
	/* Relative humidity (centipercent) */
	uint16_t humidity;
} __packed;

/* Ambient temperature */
struct tdf_ambient_temperature {
	/* Ambient temperature (millidegrees) */
	int32_t temperature;
} __packed;

/* Time synchronised to new source */
struct tdf_time_sync {
	/* Updated time source */
	uint8_t source;
	/* Time shift (microseconds) */
	int32_t shift;
} __packed;

/* Information pertaining to the previous reboot */
struct tdf_reboot_info {
	/* Reboot reason (enum infuse_reboot_reason) */
	uint8_t reason;
	/* Hardware flags (hwinfo_get_reset_cause) */
	uint32_t hardware_flags;
	/* Reboot counter */
	uint32_t count;
	/* Uptime before reboot (seconds) */
	uint32_t uptime;
	/* Program counter/Watchdog Info/Other */
	uint32_t param_1;
	/* Link Register/Watchdog Info/Other */
	uint32_t param_2;
	/* Running thread at reboot */
	char thread[8];
} __packed;

/* Accelerometer +-2G */
struct tdf_acc_2g {
	/* Raw sample */
	struct tdf_struct_xyz_16bit sample;
} __packed;

/* Accelerometer +-4G */
struct tdf_acc_4g {
	/* Raw sample */
	struct tdf_struct_xyz_16bit sample;
} __packed;

/* Accelerometer +-8G */
struct tdf_acc_8g {
	/* Raw sample */
	struct tdf_struct_xyz_16bit sample;
} __packed;

/* Accelerometer +-16G */
struct tdf_acc_16g {
	/* Raw sample */
	struct tdf_struct_xyz_16bit sample;
} __packed;

/* Gyroscope +-125 DPS */
struct tdf_gyr_125dps {
	/* Raw sample */
	struct tdf_struct_xyz_16bit sample;
} __packed;

/* Gyroscope +-250 DPS */
struct tdf_gyr_250dps {
	/* Raw sample */
	struct tdf_struct_xyz_16bit sample;
} __packed;

/* Gyroscope +-500 DPS */
struct tdf_gyr_500dps {
	/* Raw sample */
	struct tdf_struct_xyz_16bit sample;
} __packed;

/* Gyroscope +-1000 DPS */
struct tdf_gyr_1000dps {
	/* Raw sample */
	struct tdf_struct_xyz_16bit sample;
} __packed;

/* Gyroscope +-2000 DPS */
struct tdf_gyr_2000dps {
	/* Raw sample */
	struct tdf_struct_xyz_16bit sample;
} __packed;

/* Geo-location (WGS-84) + accuracy */
struct tdf_gcs_wgs84_llha {
	/* WGS-84 referenced location */
	struct tdf_struct_gcs_location location;
	/* Horizontal accuracy */
	int32_t h_acc;
	/* Vertical accuracy */
	int32_t v_acc;
} __packed;

/* u-blox GNSS NAV-PVT message */
struct tdf_ubx_nav_pvt {
	/* GPS time of week of the navigation epoch */
	uint32_t itow;
	/* Year (UTC) */
	uint16_t year;
	/* Month, range 1..12 (UTC) */
	uint8_t month;
	/* Day of month, range 1..31 (UTC) */
	uint8_t day;
	/* Hour of day, range 0..23 (UTC) */
	uint8_t hour;
	/* Minute of hour, range 0..59 (UTC) */
	uint8_t min;
	/* Seconds of minute, range 0..60 (UTC) */
	uint8_t sec;
	/* Validity flags */
	uint8_t valid;
	/* Time accuracy estimate (UTC) */
	uint32_t t_acc;
	/* Fraction of second, range -1e9 .. 1e9 (UTC) */
	int32_t nano;
	/* GNSS fix Type */
	uint8_t fix_type;
	/* Fix status flags */
	uint8_t flags;
	/* Additional flags */
	uint8_t flags2;
	/* Number of satellites used in Nav Solution */
	uint8_t num_sv;
	/* Longitude */
	int32_t lon;
	/* Latitude */
	int32_t lat;
	/* Height above ellipsoid */
	int32_t height;
	/* Height above mean sea level */
	int32_t h_msl;
	/* Horizontal accuracy estimate */
	uint32_t h_acc;
	/* Vertical accuracy estimate */
	uint32_t v_acc;
	/* NED north velocity */
	int32_t vel_n;
	/* NED east velocity */
	int32_t vel_e;
	/* NED down velocity */
	int32_t vel_d;
	/* Ground Speed (2-D) */
	int32_t g_speed;
	/* Heading of motion (2-D) */
	int32_t head_mot;
	/* Speed accuracy estimate */
	uint32_t s_acc;
	/* Heading accuracy estimate (both motion and vehicle) */
	uint32_t head_acc;
	/* Position DOP */
	uint16_t p_dop;
	/* Additional flags */
	uint16_t flags3;
	/* Reserved */
	uint8_t reserved0[4];
	/* Heading of vehicle (2-D) */
	int32_t head_veh;
	/* Magnetic declination */
	int16_t mag_dec;
	/* Magnetic declination accuracy */
	uint16_t mag_acc;
} __packed;

/* Information on service cell and registration status */
struct tdf_lte_conn_status {
	/* Global LTE cell identifier */
	struct tdf_struct_lte_cell_id_global cell;
	/* Evolved Absolute Radio Frequency Channel (E-ARFCN) */
	uint32_t earfcn;
	/* Registration status (See AT+CEREG) */
	uint8_t status;
	/* Access Technology (7 = LTE-M, 9 = NB-IoT) */
	uint8_t tech;
	/* Reference signal received power (255 = Unknown) */
	uint8_t rsrp;
	/* Reference signal received quality (-128 = Unknown) */
	int8_t rsrq;
} __packed;

/* Example array type */
struct tdf_array_type {
	/* I am an array of length 4 */
	uint8_t array[4];
} __packed;

/* Infuse-IoT builtin TDF definitions */
enum tdf_builtin_id {
	TDF_ANNOUNCE = 1,
	TDF_BATTERY_STATE = 2,
	TDF_AMBIENT_TEMP_PRES_HUM = 3,
	TDF_AMBIENT_TEMPERATURE = 4,
	TDF_TIME_SYNC = 5,
	TDF_REBOOT_INFO = 6,
	TDF_ACC_2G = 10,
	TDF_ACC_4G = 11,
	TDF_ACC_8G = 12,
	TDF_ACC_16G = 13,
	TDF_GYR_125DPS = 14,
	TDF_GYR_250DPS = 15,
	TDF_GYR_500DPS = 16,
	TDF_GYR_1000DPS = 17,
	TDF_GYR_2000DPS = 18,
	TDF_GCS_WGS84_LLHA = 19,
	TDF_UBX_NAV_PVT = 20,
	TDF_LTE_CONN_STATUS = 21,
	TDF_ARRAY_TYPE = 100,
	/* End of builtin TDF range */
	TDF_BUILTIN_END = 1024,
};

/* Size of builtin TDF definitions */
enum tdf_builtin_size {
	_TDF_ANNOUNCE_SIZE = sizeof(struct tdf_announce),
	_TDF_BATTERY_STATE_SIZE = sizeof(struct tdf_battery_state),
	_TDF_AMBIENT_TEMP_PRES_HUM_SIZE = sizeof(struct tdf_ambient_temp_pres_hum),
	_TDF_AMBIENT_TEMPERATURE_SIZE = sizeof(struct tdf_ambient_temperature),
	_TDF_TIME_SYNC_SIZE = sizeof(struct tdf_time_sync),
	_TDF_REBOOT_INFO_SIZE = sizeof(struct tdf_reboot_info),
	_TDF_ACC_2G_SIZE = sizeof(struct tdf_acc_2g),
	_TDF_ACC_4G_SIZE = sizeof(struct tdf_acc_4g),
	_TDF_ACC_8G_SIZE = sizeof(struct tdf_acc_8g),
	_TDF_ACC_16G_SIZE = sizeof(struct tdf_acc_16g),
	_TDF_GYR_125DPS_SIZE = sizeof(struct tdf_gyr_125dps),
	_TDF_GYR_250DPS_SIZE = sizeof(struct tdf_gyr_250dps),
	_TDF_GYR_500DPS_SIZE = sizeof(struct tdf_gyr_500dps),
	_TDF_GYR_1000DPS_SIZE = sizeof(struct tdf_gyr_1000dps),
	_TDF_GYR_2000DPS_SIZE = sizeof(struct tdf_gyr_2000dps),
	_TDF_GCS_WGS84_LLHA_SIZE = sizeof(struct tdf_gcs_wgs84_llha),
	_TDF_UBX_NAV_PVT_SIZE = sizeof(struct tdf_ubx_nav_pvt),
	_TDF_LTE_CONN_STATUS_SIZE = sizeof(struct tdf_lte_conn_status),
	_TDF_ARRAY_TYPE_SIZE = sizeof(struct tdf_array_type),
};

/**
 * @}
 */

#ifdef __cplusplus
}
#endif

#endif /* INFUSE_SDK_INCLUDE_INFUSE_TDF_DEFINITIONS_H_ */
