/**
 * @file
 * @brief Autogenerated KV definitions
 * @copyright 2024 Embeint Pty Ltd
 * @author scripts/west_commands/cloudgen.py
 *
 * SPDX-License-Identifier: LicenseRef-Embeint
 */

#ifndef INFUSE_SDK_INCLUDE_INFUSE_KV_DEFINITIONS_H_
#define INFUSE_SDK_INCLUDE_INFUSE_KV_DEFINITIONS_H_

#include <stdint.h>

#include <zephyr/toolchain.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief Common KV struct fields
 * @defgroup kv_struct_definitions Common KV struct fields
 * @{
 */

/* Geographic Co-ordinate System location */
struct gcs_location {
	int32_t latitude;
	int32_t longitude;
	int32_t height;
} __packed;

/* String type */
struct kv_string {
	uint8_t value_num;
	char value[];
} __packed;

/* clang-format off */
/* Compile time definition for known array length */
#define KV_STRUCT_KV_STRING_VAR(num) \
	struct { \
		uint8_t value_num; \
		char value[num]; \
	} __packed
/* clang-format on */

/**
 * @}
 */

/**
 * @brief Builtin KV Structure Definitions
 * @defgroup builtin_kv_definitions KV Structure Definitions
 * @{
 */

/* Nunmber of times device has rebooted */
struct kv_reboots {
	uint32_t count;
} __packed;

/* Fixed global location of the device */
struct kv_fixed_location {
	/* Location */
	struct gcs_location location;
} __packed;

/* WiFi network name */
struct kv_wifi_ssid {
	/* WiFi network name */
	struct kv_string ssid;
} __packed;

/* clang-format off */
/* Compile time definition for known array length */
#define _KV_KEY_WIFI_SSID_VAR(num) \
	struct { \
		KV_STRUCT_KV_STRING_VAR(num) ssid; \
	} __packed
/* clang-format on */

/* WiFi network password */
struct kv_wifi_psk {
	/* WiFi pre-shared-key */
	struct kv_string psk;
} __packed;

/* clang-format off */
/* Compile time definition for known array length */
#define _KV_KEY_WIFI_PSK_VAR(num) \
	struct { \
		KV_STRUCT_KV_STRING_VAR(num) psk; \
	} __packed
/* clang-format on */

/* URL of the NTP server to use for time synchronisation */
struct kv_ntp_server_url {
	/* NTP server URL */
	struct kv_string url;
} __packed;

/* clang-format off */
/* Compile time definition for known array length */
#define _KV_KEY_NTP_SERVER_URL_VAR(num) \
	struct { \
		KV_STRUCT_KV_STRING_VAR(num) url; \
	} __packed
/* clang-format on */

/* ePacket UDP server hostname */
struct kv_epacket_udp_url {
	/* UDP server hostname */
	struct kv_string server;
} __packed;

/* clang-format off */
/* Compile time definition for known array length */
#define _KV_KEY_EPACKET_UDP_URL_VAR(num) \
	struct { \
		KV_STRUCT_KV_STRING_VAR(num) server; \
	} __packed
/* clang-format on */

/* ePacket UDP server port */
struct kv_epacket_udp_port {
	/* UDP server port */
	uint32_t port;
} __packed;

/* Array of points defining a closed polygon */
struct kv_geofence {
	/* Points in geofence */
	uint8_t points_num;
	struct gcs_location points[];
} __packed;

/* clang-format off */
/* Compile time definition for known array length */
#define _KV_KEY_GEOFENCE_VAR(num) \
	struct { \
		uint8_t points_num; \
		struct gcs_location points[num]; \
	} __packed
/* clang-format on */

/* Infuse IoT builtin KV definitions */
enum kv_builtin_id {
	KV_KEY_REBOOTS = 0,
	KV_KEY_FIXED_LOCATION = 10,
	KV_KEY_WIFI_SSID = 20,
	KV_KEY_WIFI_PSK = 21,
	KV_KEY_NTP_SERVER_URL = 30,
	KV_KEY_EPACKET_UDP_URL = 31,
	KV_KEY_EPACKET_UDP_PORT = 32,
	KV_KEY_GEOFENCE = 100,
	/* End of builtin KV range */
	KV_KEY_BUILTIN_END = 1024,
};

/* Size of builtin KV definitions */
enum kv_builtin_size {
	_KV_KEY_REBOOTS_SIZE = sizeof(struct kv_reboots),
	_KV_KEY_FIXED_LOCATION_SIZE = sizeof(struct kv_fixed_location),
	_KV_KEY_EPACKET_UDP_PORT_SIZE = sizeof(struct kv_epacket_udp_port),
};

/* clang-format off */
/* Types of builtin KV definitions */
#define _KV_KEY_REBOOTS_TYPE struct kv_reboots
#define _KV_KEY_FIXED_LOCATION_TYPE struct kv_fixed_location
#define _KV_KEY_WIFI_SSID_TYPE struct kv_wifi_ssid
#define _KV_KEY_WIFI_PSK_TYPE struct kv_wifi_psk
#define _KV_KEY_NTP_SERVER_URL_TYPE struct kv_ntp_server_url
#define _KV_KEY_EPACKET_UDP_URL_TYPE struct kv_epacket_udp_url
#define _KV_KEY_EPACKET_UDP_PORT_TYPE struct kv_epacket_udp_port
#define _KV_KEY_GEOFENCE_TYPE struct kv_geofence
/* clang-format on */

/* Convert key ID to key type */
#define KV_KEY_TYPE(key) _##key##_TYPE

#define _KV_KEY_TYPE_VAR_EXEC(macro, num) macro(num)

/* Convert key ID to key type */
#define KV_KEY_TYPE_VAR(key, num) _KV_KEY_TYPE_VAR_EXEC(_##key##_VAR, num)

/* Helper for generating compile time constant `struct kv_string` */
#define KV_STRING_CONST(name, val) KV_STRUCT_KV_STRING_VAR(sizeof(val)) name = {sizeof(val), val};

/**
 * @}
 */

#ifdef __cplusplus
}
#endif

#endif /* INFUSE_SDK_INCLUDE_INFUSE_KV_DEFINITIONS_H_ */
