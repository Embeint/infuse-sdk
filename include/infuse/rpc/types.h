/**
 * @file
 * @brief Autogenerated RPC definitions
 * @copyright 2024 Embeint Inc
 * @author scripts/west_commands/cloudgen.py
 *
 * SPDX-License-Identifier: LicenseRef-Embeint
 */

#ifndef INFUSE_SDK_INCLUDE_INFUSE_RPC_TYPES_H_
#define INFUSE_SDK_INCLUDE_INFUSE_RPC_TYPES_H_

#include <stdint.h>

#include <zephyr/toolchain.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief RPC packet headers
 * @defgroup rpc_packet_headers RPC packet headers
 * @{
 */

/**
 * @brief Header for @ref INFUSE_RPC_CMD packet
 */
struct infuse_rpc_req_header {
	/* Unique request ID */
	uint32_t request_id;
	/* Command to run */
	uint16_t command_id;
} __packed;

/**
 * @brief Secondary header for RPCs expecting @ref INFUSE_RPC_DATA
 */
struct infuse_rpc_req_data_header {
	/* Amount of data expected to be transferred */
	uint32_t size;
	/* Send an @ref INFUSE_RPC_DATA_ACK response every N packets received */
	uint8_t rx_ack_period;
};

/**
 * @brief @ref INFUSE_RPC_DATA payload
 */
struct infuse_rpc_data {
	/* Request ID matching original @ref infuse_rpc_req_header */
	uint32_t request_id;
	/* Byte offset of data in this payload */
	uint32_t offset;
	/* Data payload */
	uint8_t payload[];
} __packed;

/**
 * @brief @ref INFUSE_RPC_DATA_ACK packet
 */
struct infuse_rpc_data_ack {
	/* Request ID matching original @ref infuse_rpc_req_header */
	uint32_t request_id;
	/* Byte offsets received */
	uint32_t offsets[];
} __packed;

/**
 * @brief Header for @ref INFUSE_RPC_RSP packet
 */
struct infuse_rpc_rsp_header {
	/* Request ID matching original @ref infuse_rpc_req_header */
	uint32_t request_id;
	/* Command that was run */
	uint16_t command_id;
	/* Result of the RPC */
	int16_t return_code;
} __packed;

/**
 * @}
 */

/* clang-format off */

/**
 * @brief Common RPC struct fields
 * @defgroup rpc_struct_definitions Common RPC struct fields
 * @{
 */

/* MCUboot semantic versioning struct */
struct rpc_struct_mcuboot_img_sem_ver {
	uint8_t major;
	uint8_t minor;
	uint16_t revision;
	uint32_t build_num;
} __packed;

/* KV store data value */
struct rpc_struct_kv_store_value {
	uint16_t id;
	int16_t len;
	uint8_t data[];
} __packed;

/* IPv4 address */
struct rpc_struct_ipv4_address {
	uint8_t addr[4];
} __packed;

/* IPv6 address */
struct rpc_struct_ipv6_address {
	uint8_t addr[16];
} __packed;

/* Common network state */
struct rpc_struct_network_state {
	/* Operational state */
	uint8_t state;
	/* Interface flags */
	uint32_t if_flags;
	/* L2 flags */
	uint16_t l2_flags;
	/* Maximum transmission unit */
	uint16_t mtu;
	/* Self IPv4 address */
	struct rpc_struct_ipv4_address ipv4;
	/* Self IPv6 address */
	struct rpc_struct_ipv6_address ipv6;
} __packed;

/* WiFi interface status */
struct rpc_struct_wifi_state {
	/* Operational state */
	uint8_t state;
	/* Service Set Identifier (Network Name) */
	char ssid[32];
	/* Basic Service Set Identifier (MAC address) */
	char bssid[6];
	/* Frequency band */
	uint8_t band;
	/* Channel index */
	uint8_t channel;
	/* https://w1.fi/wpa_supplicant/devel/defs_8h.html#a4aeb27c1e4abd046df3064ea9756f0bc */
	uint8_t iface_mode;
	/* WiFi link operating mode (https://en.wikipedia.org/wiki/Wi-Fi#Versions_and_generations) */
	uint8_t link_mode;
	/* IEEE 802.11 security type */
	uint8_t security;
	/* Received signal strength (dBm) */
	int8_t rssi;
	/* Beacon interval (ms) */
	uint16_t beacon_interval;
	/* Target Wake Time capable? */
	uint8_t twt_capable;
} __packed;

/* WiFi interface status */
struct rpc_struct_wifi_scan_result {
	/* Frequency band */
	uint8_t band;
	/* Channel index */
	uint8_t channel;
	/* IEEE 802.11 security type */
	uint8_t security;
	/* Received signal strength (dBm) */
	int8_t rssi;
	/* Basic Service Set Identifier (MAC address) */
	char bssid[6];
	/* SSID length */
	uint8_t ssid_len;
	/* Service Set Identifier (Network Name) */
	char ssid[];
} __packed;

/**
 * @}
 */

/**
 * @brief Builtin RPC definitions
 * @defgroup builtin_rpc_definitions Builtin RPC definitions
 * @{
 */

/* Infuse-IoT builtin RPC commands */
enum rpc_builtin_id {
	/* Reboot the device after a delay */
	RPC_ID_REBOOT = 1,
	/* Immediately trigger an exception on the device */
	RPC_ID_FAULT = 2,
	/* Get the current time knowledge of the device */
	RPC_ID_TIME_GET = 3,
	/* Set the current time of the device */
	RPC_ID_TIME_SET = 4,
	/* Write values to the KV store */
	RPC_ID_KV_WRITE = 5,
	/* Read values from the KV store */
	RPC_ID_KV_READ = 6,
	/* Scan for WiFi networks */
	RPC_ID_WIFI_SCAN = 10,
	/* Get current WiFi interface state */
	RPC_ID_WIFI_STATE = 11,
	/* Query current security state and validate identity */
	RPC_ID_SECURITY_STATE = 30000,
	/* Send multiple INFUSE_RPC_DATA packets */
	RPC_ID_DATA_SENDER = 32765,
	/* Receive multiple INFUSE_RPC_DATA packets */
	RPC_ID_DATA_RECEIVER = 32766,
	/* Echo any input data in the response */
	RPC_ID_ECHO = 32767,
	/* End of builtin RPC range */
	RPC_BUILTIN_END = 32768,
};

/* Reboot the device after a delay */
struct rpc_reboot_request {
	struct infuse_rpc_req_header header;
	/* Requested delay (0 == default) */
	uint32_t delay_ms;
} __packed;

struct rpc_reboot_response {
	struct infuse_rpc_rsp_header header;
	/* Duration until reboot */
	uint32_t delay_ms;
} __packed;

/* Immediately trigger an exception on the device */
struct rpc_fault_request {
	struct infuse_rpc_req_header header;
	/* K_ERR_* fault type to trigger */
	uint8_t fault;
	/* Zero that the compiler doesn't know about */
	uint32_t zero;
} __packed;

struct rpc_fault_response {
	struct infuse_rpc_rsp_header header;
} __packed;

/* Get the current time knowledge of the device */
struct rpc_time_get_request {
	struct infuse_rpc_req_header header;
} __packed;

struct rpc_time_get_response {
	struct infuse_rpc_rsp_header header;
	/* Source of the time knowledge */
	uint8_t time_source;
	/* Current civil time on the device */
	uint64_t civil_time;
	/* How old the time knowledge is (seconds) */
	uint32_t sync_age;
} __packed;

/* Set the current time of the device */
struct rpc_time_set_request {
	struct infuse_rpc_req_header header;
	/* Current civil time on the device */
	uint64_t civil_time;
} __packed;

struct rpc_time_set_response {
	struct infuse_rpc_rsp_header header;
} __packed;

/* Write values to the KV store */
struct rpc_kv_write_request {
	struct infuse_rpc_req_header header;
	/* Number of values in buffer */
	uint8_t num;
	/* Array of KV values */
	struct rpc_struct_kv_store_value values[];
} __packed;

struct rpc_kv_write_response {
	struct infuse_rpc_rsp_header header;
	/* Result of writes */
	int16_t rc[];
} __packed;

/* Read values from the KV store */
struct rpc_kv_read_request {
	struct infuse_rpc_req_header header;
	/* Number of values to read */
	uint8_t num;
	/* Array of KV keys */
	uint16_t keys[];
} __packed;

struct rpc_kv_read_response {
	struct infuse_rpc_rsp_header header;
	/* Array of KV values */
	struct rpc_struct_kv_store_value values[];
} __packed;

/* Scan for WiFi networks */
struct rpc_wifi_scan_request {
	struct infuse_rpc_req_header header;
} __packed;

struct rpc_wifi_scan_response {
	struct infuse_rpc_rsp_header header;
	/* Number of scanned networks */
	uint8_t network_count;
	/* Array of scanned networks */
	struct rpc_struct_wifi_scan_result networks[];
} __packed;

/* Get current WiFi interface state */
struct rpc_wifi_state_request {
	struct infuse_rpc_req_header header;
} __packed;

struct rpc_wifi_state_response {
	struct infuse_rpc_rsp_header header;
	/* Common network state */
	struct rpc_struct_network_state common;
	/* WiFi state */
	struct rpc_struct_wifi_state wifi;
} __packed;

/* Query current security state and validate identity */
struct rpc_security_state_request {
	struct infuse_rpc_req_header header;
	/* Random challenge data */
	uint8_t challenge[16];
} __packed;

struct rpc_security_state_response {
	struct infuse_rpc_rsp_header header;
	/* Cloud public ECC key */
	uint8_t cloud_public_key[32];
	/* Device public ECC key */
	uint8_t device_public_key[32];
	/* Current network ID */
	uint32_t network_id;
	/* Type of the challenge response */
	uint8_t challenge_response_type;
	/* Type of the challenge response */
	uint8_t challenge_response[];
} __packed;

/* Send multiple INFUSE_RPC_DATA packets */
struct rpc_data_sender_request {
	struct infuse_rpc_req_header header;
	struct infuse_rpc_req_data_header data_header;
} __packed;

struct rpc_data_sender_response {
	struct infuse_rpc_rsp_header header;
} __packed;

/* Receive multiple INFUSE_RPC_DATA packets */
struct rpc_data_receiver_request {
	struct infuse_rpc_req_header header;
	struct infuse_rpc_req_data_header data_header;
} __packed;

struct rpc_data_receiver_response {
	struct infuse_rpc_rsp_header header;
	/* Number of bytes received */
	uint32_t received;
} __packed;

/* Echo any input data in the response */
struct rpc_echo_request {
	struct infuse_rpc_req_header header;
	/* Binary data */
	uint8_t array[];
} __packed;

struct rpc_echo_response {
	struct infuse_rpc_rsp_header header;
	/* Binary data */
	uint8_t array[];
} __packed;

/**
 * @}
 */

/* clang-format on */

#ifdef __cplusplus
}
#endif

#endif /* INFUSE_SDK_INCLUDE_INFUSE_RPC_TYPES_H_ */
