{
    "structs": {
        "rpc_struct_mcuboot_img_sem_ver": {
            "description": "MCUboot semantic versioning struct",
            "fields": [
                {"name": "major", "type": "uint8_t"},
                {"name": "minor", "type": "uint8_t"},
                {"name": "revision", "type": "uint16_t"},
                {"name": "build_num", "type": "uint32_t"}
            ]
        },
        "rpc_struct_kv_store_value": {
            "description": "KV store data value",
            "fields": [
                {"name": "id", "type": "uint16_t"},
                {"name": "len", "type": "int16_t"},
                {"name": "data", "type": "uint8_t", "num": 0}
            ]
        },
        "rpc_struct_kv_store_crc": {
            "description": "KV store data CRC",
            "fields": [
                {"name": "id", "type": "uint16_t"},
                {"name": "crc", "type": "uint32_t"}
            ]
        },
        "rpc_struct_bt_addr_le": {
            "description": "Bluetooth LE address",
            "fields": [
                {"name": "type", "type": "enum rpc_enum_bt_le_addr_type"},
                {"name": "val", "type": "uint8_t", "num": 6}
            ]
        },
        "rpc_struct_ipv4_address": {
            "description": "IPv4 address",
            "fields": [
                {"name": "addr", "type": "uint8_t", "num": 4}
            ]
        },
        "rpc_struct_ipv6_address": {
            "description": "IPv6 address",
            "fields": [
                {"name": "addr", "type": "uint8_t", "num": 16}
            ]
        },
        "rpc_struct_network_state": {
            "description": "Common network state",
            "fields": [
                {"name": "state", "type": "uint8_t", "description": "Operational state"},
                {"name": "if_flags", "type": "uint32_t", "description": "Interface flags"},
                {"name": "l2_flags", "type": "uint16_t", "description": "L2 flags"},
                {"name": "mtu", "type": "uint16_t", "description": "Maximum transmission unit"},
                {"name": "ipv4", "type": "struct rpc_struct_ipv4_address", "description": "Self IPv4 address"},
                {"name": "ipv6", "type": "struct rpc_struct_ipv6_address", "description": "Self IPv6 address"}
            ]
        },
        "rpc_struct_wifi_state": {
            "description": "WiFi interface status",
            "fields": [
                {"name": "state", "type": "uint8_t", "description": "Operational state"},
                {"name": "ssid", "type": "char", "num": 32, "description": "Service Set Identifier (Network Name)"},
                {"name": "bssid", "type": "uint8_t", "num": 6, "description": "Basic Service Set Identifier (MAC address)"},
                {"name": "band", "type": "uint8_t", "description": "Frequency band"},
                {"name": "channel", "type": "uint8_t", "description": "Channel index"},
                {"name": "iface_mode", "type": "uint8_t", "description": "https://w1.fi/wpa_supplicant/devel/defs_8h.html#a4aeb27c1e4abd046df3064ea9756f0bc"},
                {"name": "link_mode", "type": "uint8_t", "description": "WiFi link operating mode (https://en.wikipedia.org/wiki/Wi-Fi#Versions_and_generations)"},
                {"name": "security", "type": "uint8_t", "description": "IEEE 802.11 security type"},
                {"name": "rssi", "type": "int8_t", "description": "Received signal strength (dBm)"},
                {"name": "beacon_interval", "type": "uint16_t", "description": "Beacon interval (ms)"},
                {"name": "twt_capable", "type": "uint8_t", "description": "Target Wake Time capable?"}
            ]
        },
        "rpc_struct_lte_state": {
            "description": "LTE interface status",
            "fields": [
                {"name": "registration_state", "type": "uint8_t", "description": "Network registration state"},
                {"name": "access_technology", "type": "uint8_t", "description": "Access Technology (3GPP TS 127.007)"},
                {"name": "mcc", "type": "uint16_t", "description": "Mobile Country Code"},
                {"name": "mnc", "type": "uint16_t", "description": "Mobile Network Code"},
                {"name": "cell_id", "type": "uint32_t", "description": "E-UTRAN cell ID"},
                {"name": "tac", "type": "uint32_t", "description": "Tracking area code"},
                {"name": "tau", "type": "int32_t", "description": "Tracking area update period"},
                {"name": "earfcn", "type": "uint16_t", "description": "Tracking area code (3GPP TS 36.101)"},
                {"name": "band", "type": "uint8_t", "description": "LTE Band (3GPP 36.101)"},
                {"name": "psm_active_time", "type": "int16_t", "description": "Seconds between RRC idle and PSM"},
                {"name": "edrx_interval", "type": "float", "description": "Period between eDRX paging windows"},
                {"name": "edrx_paging_window", "type": "float", "description": "Duration of eDRX paging window"},
                {"name": "rsrp", "type": "int16_t", "description": "Reference signal received power (dBm)"},
                {"name": "rsrq", "type": "int8_t", "description": "Reference signal received quality (dB)"}
            ]
        },
        "rpc_struct_wifi_scan_result": {
            "description": "WiFi interface status",
            "fields": [
                {"name": "band", "type": "uint8_t", "description": "Frequency band"},
                {"name": "channel", "type": "uint8_t", "description": "Channel index"},
                {"name": "security", "type": "uint8_t", "description": "IEEE 802.11 security type"},
                {"name": "rssi", "type": "int8_t", "description": "Received signal strength (dBm)"},
                {"name": "bssid", "type": "uint8_t", "num": 6, "description": "Basic Service Set Identifier (MAC address)"},
                {"name": "ssid_len", "type": "uint8_t", "description": "SSID length"},
                {"name": "ssid", "type": "char", "num": 0, "description": "Service Set Identifier (Network Name)"}
            ]
        },
        "rpc_struct_xyz_s16": {
            "description": "Signed 16 bit XYZ vector",
            "fields": [
                {"name": "x", "type": "int16_t", "description": "X axis"},
                {"name": "y", "type": "int16_t", "description": "Y axis"},
                {"name": "z", "type": "int16_t", "description": "Z axis"}
            ]
        },
        "rpc_struct_infuse_state": {
            "description": "Single Infuse-IoT application state",
            "fields": [
                {"name": "state", "type": "uint8_t", "description": "State"},
                {"name": "timeout", "type": "uint16_t", "description": "Duration state is set for"}
            ]
        },
        "rpc_struct_sockaddr": {
            "description": "`struct sockaddr_in` or `struct sockaddr_in6` compatible address",
            "fields": [
                {"name": "sin_family", "type": "uint8_t", "description": "AF_INET / AF_INET6"},
                {"name": "sin_port", "type": "uint16_t", "description": "Port number (Network byte order)"},
                {"name": "sin_addr", "type": "uint8_t", "num": 16, "description": "IPv4/IPv6 address"},
                {"name": "scope_id", "type": "uint8_t", "description": "Interfaces for a scope (IPv6 only)"}
            ]
        },
        "rpc_struct_heap_info": {
            "description": "struct k_heap information",
            "fields": [
                {"name": "addr", "type": "uint32_t", "description": "Address of the heap structure"},
                {"name": "free_bytes", "type": "uint32_t", "description": "Number of bytes currently free"},
                {"name": "allocated_bytes", "type": "uint32_t", "description": "Number of bytes currently allocated"},
                {"name": "max_allocated_bytes", "type": "uint32_t", "description": "Maximum number of bytes ever concurrently allocated"}
            ]
        }
    },
    "enums": {
        "rpc_enum_bt_le_addr_type": {
            "description": "Bluetooth LE address type",
            "type": "uint8_t",
            "values": [
                {"name": "PUBLIC", "value": 0, "description": "Public address"},
                {"name": "RANDOM", "value": 1, "description": "Static random address"}
            ]
        },
        "rpc_enum_file_action": {
            "description": "Actions to take upon receiving a file",
            "type": "uint8_t",
            "values": [
                {"name": "DISCARD", "value": 0, "description": "Discard received file (Useful for testing)"},
                {"name": "APP_IMG", "value": 1, "description": "Complete application image for firmware upgrade"},
                {"name": "BT_CTLR_IMG", "value": 2, "description": "Complete Bluetooth controller image for firmware upgrade"},
                {"name": "APP_CPATCH", "value": 11, "description": "CPatch application image upgrade (binary diff)"},
                {"name": "BT_CTLR_CPATCH", "value": 12, "description": "CPatch Bluetooth controller image upgrade (binary diff)"},
                {"name": "NRF91_MODEM_DIFF", "value": 20, "description": "nRF91 LTE modem firmware upgrade diff"},
                {"name": "FILE_FOR_COPY", "value": 30, "description": "File to copy to another device"}
            ]
        },
        "rpc_enum_infuse_bt_characteristic": {
            "description": "Infuse-IoT Bluetooth characteristics (Bitmask)",
            "type": "uint8_t",
            "values": [
                {"name": "COMMAND", "value": 1, "description": "Command characteristic"},
                {"name": "DATA", "value": 2, "description": "Data characteristic"},
                {"name": "LOGGING", "value": 4, "description": "Serial log characteristic"}
            ]
        },
        "rpc_enum_data_logger": {
            "description": "Data Logger identifier",
            "type": "uint8_t",
            "values": [
                {"name": "FLASH_ONBOARD", "value": 1, "description": "Onboard flash logger"},
                {"name": "FLASH_REMOVABLE", "value": 2, "description": "Removable flash logger (SD)"},
                {"name": "UDP", "value": 3, "description": "Networked UDP logger"}
            ]
        },
        "rpc_enum_zperf_data_source": {
            "description": "Source for zperf data upload",
            "type": "uint8_t",
            "values": [
                {"name": "CONSTANT", "value": 0, "description": "Constant payload ('i')"},
                {"name": "RANDOM", "value": 1, "description": "Random payload contents"},
                {"name": "FLASH_ONBOARD", "value": 2, "description": "Read data from onboard flash logger"},
                {"name": "FLASH_REMOVABLE", "value": 3, "description": "Read data from removable flash logger (SD)"},
                {"name": "ENCRYPT", "value": 128, "description": "Flag (0x80) to specify payload should be encrypted"}
            ]
        }
    },
    "commands": {
        "1": {
            "name": "reboot",
            "description": "Reboot the device after a delay",
            "depends_on": "INFUSE_REBOOT",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
                {"name": "delay_ms", "type": "uint32_t", "description": "Requested delay (0 == default)"}
            ],
            "response_params": [
                {"name": "delay_ms", "type": "uint32_t", "description": "Duration until reboot"}
            ]
        },
        "2": {
            "name": "fault",
            "description": "Immediately trigger an exception on the device",
            "depends_on": "INFUSE_REBOOT && ARM",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
                {"name": "fault", "type": "uint8_t", "description": "K_ERR_* fault type to trigger"},
                {"name": "zero", "type": "uint32_t", "description": "Zero that the compiler doesn't know about"}

            ],
            "response_params": []
        },
        "3": {
            "name": "time_get",
            "description": "Get the current time knowledge of the device",
            "depends_on": "INFUSE_EPOCH_TIME",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_NETWORK",
            "request_params": [],
            "response_params": [
                {"name": "time_source", "type": "uint8_t", "description": "Source of the time knowledge"},
                {"name": "epoch_time", "type": "uint64_t", "description": "Current epoch time on the device"},
                {"name": "sync_age", "type": "uint32_t", "description": "How old the time knowledge is (seconds)"}
            ]
        },
        "4": {
            "name": "time_set",
            "description": "Set the current time of the device",
            "depends_on": "INFUSE_EPOCH_TIME",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
                {"name": "epoch_time", "type": "uint64_t", "description": "Current epoch time on the device"}

            ],
            "response_params": []
        },
        "5": {
            "name": "kv_write",
            "description": "Write values to the KV store",
            "depends_on": "KV_STORE",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
                {"name": "num", "type": "uint8_t", "description": "Number of values in buffer"},
                {"name": "values", "type": "struct rpc_struct_kv_store_value", "num": 0, "description": "Array of KV values"}
            ],
            "response_params": [
                {"name": "rc", "type": "int16_t", "num": 0, "description": "Result of writes"}
             ]
        },
        "6": {
            "name": "kv_read",
            "description": "Read values from the KV store",
            "depends_on": "KV_STORE",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
                {"name": "num", "type": "uint8_t", "description": "Number of values to read"},
                {"name": "keys", "type": "uint16_t", "num": 0, "description": "Array of KV keys"}
            ],
            "response_params": [
                {"name": "values", "type": "struct rpc_struct_kv_store_value", "num": 0, "description": "Array of KV values"}
            ]
        },
        "7": {
            "name": "kv_reflect_crcs",
            "description": "Read KV store CRC's",
            "depends_on": "KV_STORE",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
                {"name": "offset", "type": "uint16_t", "description": "Number of CRCs to skip in response"}
            ],
            "response_params": [
                {"name": "num", "type": "uint16_t", "description": "Number of CRCs in crcs array"},
                {"name": "remaining", "type": "uint16_t", "description": "Number of CRCs that did not fit in this response"},
                {"name": "crcs", "type": "struct rpc_struct_kv_store_crc", "num": 0, "description": "Array of KV CRCs"}
            ]
        },
        "8": {
            "name": "zbus_channel_state",
            "description": "Query current state of zbus channel",
            "depends_on": "ZBUS",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
                {"name": "channel_id", "type": "uint32_t", "description": "Channel ID to query"}
            ],
            "response_params": [
                {"name": "publish_timestamp", "type": "uint64_t", "description": "Epoch time of last data publish"},
                {"name": "publish_count", "type": "uint32_t", "description": "Number of times data has been published to channel"},
                {"name": "publish_period_avg_ms", "type": "uint32_t", "description": "Average time between publishing"},
                {"name": "data", "type": "uint8_t", "num": 0, "description": "Channel data"}
            ]
        },
        "9": {
            "name": "application_info",
            "description": "Query basic application versions and state",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_NETWORK",
            "request_params": [],
            "response_params": [
                {"name": "application_id", "type": "uint32_t", "description": "Application ID"},
                {"name": "version", "type": "struct rpc_struct_mcuboot_img_sem_ver", "description": "Application version number"},
                {"name": "network_id", "type": "uint32_t", "description": "Current Infuse network ID"},
                {"name": "uptime", "type": "uint32_t", "description": "Application uptime"},
                {"name": "reboots", "type": "uint32_t", "description": "Application reboot count"},
                {"name": "kv_crc", "type": "uint32_t", "description": "Key-Value store reflect global CRC"},
                {"name": "data_blocks_internal", "type": "uint32_t", "description": "Data blocks logged to internal flash"},
                {"name": "data_blocks_external", "type": "uint32_t", "description": "Data blocks logged to external flash"}
            ]
        },
        "10": {
            "name": "wifi_scan",
            "description": "Scan for WiFi networks",
            "depends_on": "NET_L2_WIFI_MGMT",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [],
            "response_params": [
                {"name": "network_count", "type": "uint8_t", "description": "Number of scanned networks"},
                {"name": "networks", "type": "struct rpc_struct_wifi_scan_result", "num": 0, "description": "Array of scanned networks"}
            ]
        },
        "11": {
            "name": "wifi_state",
            "description": "Get current WiFi interface state",
            "depends_on": "NET_L2_WIFI_MGMT",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [],
            "response_params": [
                {"name": "common", "type": "struct rpc_struct_network_state", "description": "Common network state"},
                {"name": "wifi", "type": "struct rpc_struct_wifi_state", "description": "WiFi state"}
            ]
        },
        "12": {
            "name": "last_reboot",
            "description": "Retrieve information pertaining to the previous reboot",
            "depends_on": "INFUSE_COMMON_BOOT",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [],
            "response_params": [
                {"name": "reason", "type": "uint8_t", "description": "Reboot reason (enum infuse_reboot_reason)"},
                {"name": "epoch_time_source", "type": "uint8_t", "description": "Time source at reboot"},
                {"name": "epoch_time", "type": "uint64_t", "description": "Epoch time at reboot"},
                {"name": "hardware_flags", "type": "uint32_t", "description": "Hardware flags (hwinfo_get_reset_cause)"},
                {"name": "uptime", "type": "uint32_t", "description": "Uptime before reboot (seconds)"},
                {"name": "param_1", "type": "uint32_t", "description": "Program counter/Watchdog Info/Other"},
                {"name": "param_2", "type": "uint32_t", "description": "Link Register/Watchdog Info/Other"},
                {"name": "thread", "type": "char", "num": 8, "description": "Running thread at reboot"},
                {"name": "esf", "type": "uint32_t", "num": 0, "description": "Exception stack frame values"}
            ]
        },
        "13": {
            "name": "data_logger_state",
            "description": "Get state of a data logger",
            "depends_on": "DATA_LOGGER",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
                {"name": "logger", "type": "enum rpc_enum_data_logger", "description": "Data logger to read from"}
            ],
            "response_params": [
                {"name": "bytes_logged", "type": "uint64_t", "description": "Number of bytes logged since boot"},
                {"name": "logical_blocks", "type": "uint32_t", "description": "Number of logical blocks on the logger"},
                {"name": "physical_blocks", "type": "uint32_t", "description": "Number of physical blocks on the logger"},
                {"name": "boot_block", "type": "uint32_t", "description": "Number of logical blocks present at boot"},
                {"name": "current_block", "type": "uint32_t", "description": "Number of logical blocks that have been written"},
                {"name": "earliest_block", "type": "uint32_t", "description": "Earliest logical block that still exists on the logger"},
                {"name": "block_size", "type": "uint16_t", "description": "Size of a single block in bytes"},
                {"name": "block_overhead", "type": "uint16_t", "description": "Number of bytes at the start of the block that should not contain data"},
                {"name": "erase_unit", "type": "uint16_t", "description": "Minimum erase unit of the logger in bytes"},
                {"name": "uptime", "type": "uint32_t", "description": "Current application uptime"}
            ]
        },
        "14": {
            "name": "data_logger_read",
            "description": "Read data from data logger",
            "depends_on": "DATA_LOGGER",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "rpc_data": true,
            "request_params": [
                {"name": "logger", "type": "enum rpc_enum_data_logger", "description": "Data logger to read from"},
                {"name": "start_block", "type": "uint32_t", "description": "Block to start read from"},
                {"name": "last_block", "type": "uint32_t", "description": "Last block to read from (UINT32_MAX == read to current block)"}
            ],
            "response_params": [
                {"name": "sent_len", "type": "uint32_t", "description": "Number of bytes sent"},
                {"name": "sent_crc", "type": "uint32_t", "description": "CRC32 of bytes sent"}
            ]
        },
        "15": {
            "name": "mem_read",
            "description": "Read arbitrary memory (NO ADDRESS VALIDATION PERFORMED)",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "rpc_data": true,
            "request_params": [
                {"name": "address", "type": "uint32_t", "description": "Start address"}
            ],
            "response_params": [
                {"name": "sent_len", "type": "uint32_t", "description": "Number of bytes sent"},
                {"name": "sent_crc", "type": "uint32_t", "description": "CRC32 of bytes sent"}
            ]
        },
        "16": {
            "name": "infuse_states_query",
            "description": "Read current Infuse-IoT application states",
            "depends_on": "INFUSE_APPLICATION_STATES",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
                {"name": "offset", "type": "uint8_t", "description": "Ignore first N states before populating the output"}
            ],
            "response_params": [
                {"name": "remaining", "type": "uint8_t", "description": "Additional states that were not queried"},
                {"name": "states", "type": "struct rpc_struct_infuse_state", "num": 0, "description": "Currently set states (Timeout 0 == permanent)"}
            ]
        },
        "17": {
            "name": "infuse_states_update",
            "description": "Update Infuse-IoT application states",
            "depends_on": "INFUSE_APPLICATION_STATES",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
                {"name": "num", "type": "uint8_t", "description": "Number of states to update"},
                {"name": "states", "type": "struct rpc_struct_infuse_state", "num": 0, "description": "States to update (Timeout 0 == permanent, UINT16_MAX == clear)"}
            ],
            "response_params": []
        },
        "18": {
            "name": "data_logger_erase",
            "description": "Erase all data from a data logger",
            "depends_on": "DATA_LOGGER",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
                {"name": "logger", "type": "enum rpc_enum_data_logger", "description": "Data logger to erase"},
                {"name": "erase_empty", "type": "uint8_t", "description": "Erase entire logger space, even empty blocks"}
            ],
            "response_params": [
            ]
        },
        "19": {
            "name": "heap_stats",
            "description": "Query stats of heaps",
            "depends_on": "SYS_HEAP_RUNTIME_STATS",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
            ],
            "response_params": [
                {"name": "stats", "type": "struct rpc_struct_heap_info", "num": 0, "description": "Current statistics of application heaps"}
            ]
        },
        "20": {
            "name": "lte_at_cmd",
            "description": "Run AT command against LTE modem",
            "depends_on": "NRF_MODEM_LIB || MODEM_CELLULAR",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
                {"name": "cmd", "type": "char", "num": 0, "description": "AT command string"}
            ],
            "response_params": [
                {"name": "rsp", "type": "char", "num": 0, "description": "AT command response"}
            ]
        },
        "21": {
            "name": "lte_state",
            "description": "Get current LTE interface state",
            "depends_on": "INFUSE_MODEM_MONITOR",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [],
            "response_params": [
                {"name": "common", "type": "struct rpc_struct_network_state", "description": "Common network state"},
                {"name": "lte", "type": "struct rpc_struct_lte_state", "description": "LTE state"}
            ]
        },
        "22": {
            "name": "data_logger_read_available",
            "description": "Read data from data logger, with auto-updating start_block",
            "depends_on": "DATA_LOGGER",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "rpc_data": true,
            "request_params": [
                {"name": "logger", "type": "enum rpc_enum_data_logger", "description": "Data logger to read from"},
                {"name": "start_block", "type": "uint32_t", "description": "Desired block to start read from"},
                {"name": "num_blocks", "type": "uint32_t", "description": "Maximum number of blocks to read"}
            ],
            "response_params": [
                {"name": "sent_len", "type": "uint32_t", "description": "Number of bytes sent"},
                {"name": "sent_crc", "type": "uint32_t", "description": "CRC32 of bytes sent"},
                {"name": "current_block", "type": "uint32_t", "description": "Current block after read completes"},
                {"name": "start_block_actual", "type": "uint32_t", "description": "Actual block that read started at"},
                {"name": "block_size", "type": "uint16_t", "description": "Size of a single block in bytes"}
            ]
        },
        "30": {
            "name": "coap_download",
            "description": "Download a file from a COAP server (Infuse-IoT DTLS protected)",
            "depends_on": "INFUSE_COAP",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
                {"name": "server_address", "type": "char", "num": 48, "description": "COAP server address (e.g. coap.dev.infuse-iot.com)"},
                {"name": "server_port", "type": "uint16_t", "description": "COAP server port"},
                {"name": "block_timeout_ms", "type": "uint16_t", "description": "COAP block timeout (Default 1000ms)"},
                {"name": "action", "type": "enum rpc_enum_file_action", "description": "Action to apply to downloaded file"},
                {"name": "resource_len", "type": "uint32_t", "description": "Expected resource length (UINT32_MAX if unknown)"},
                {"name": "resource_crc", "type": "uint32_t", "description": "Expected resource CRC (UINT32_MAX if unknown)"},
                {"name": "resource", "type": "char", "num": 0, "description": "Path to file on COAP server (e.g. files/small_file)"}
            ],
            "response_params": [
                {"name": "resource_len", "type": "uint32_t", "description": "Length of resource downloaded"},
                {"name": "resource_crc", "type": "uint32_t", "description": "CRC of resource downloaded"}
            ]
        },
        "31": {
            "name": "zperf_upload",
            "description": "Network upload bandwidth testing using zperf/iperf",
            "depends_on": "NET_ZPERF",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
                {"name": "peer_address", "type": "struct rpc_struct_sockaddr", "description": "Peer socket address"},
                {"name": "sock_type", "type": "uint8_t", "description": "SOCK_STREAM/SOCK_DGRAM"},
                {"name": "data_source", "type": "enum rpc_enum_zperf_data_source", "description": "Source of data to upload"},
                {"name": "duration_ms", "type": "uint32_t", "description": "Test duration in milliseconds"},
                {"name": "rate_kbps", "type": "uint32_t", "description": "Desired rate in kbps (0 for uncapped)"},
                {"name": "packet_size", "type": "uint16_t", "description": "Packet size in bytes"}
            ],
            "response_params": [
                {"name": "nb_packets_sent", "type": "uint32_t", "description": "Number of packets sent"},
                {"name": "nb_packets_rcvd", "type": "uint32_t", "description": "Number of packets received"},
                {"name": "nb_packets_lost", "type": "uint32_t", "description": "Number of packets lost"},
                {"name": "nb_packets_outorder", "type": "uint32_t", "description": "Number of packets out of order"},
                {"name": "total_len", "type": "uint64_t", "description": "Total length of the transferred data"},
                {"name": "time_in_us", "type": "uint64_t", "description": "Total time of the transfer in microseconds"},
                {"name": "jitter_in_us", "type": "uint32_t", "description": "Jitter in microseconds"},
                {"name": "client_time_in_us", "type": "uint64_t", "description": "Client connection time in microsecond"},
                {"name": "packet_size", "type": "uint32_t", "description": "Packet size"},
                {"name": "nb_packets_errors", "type": "uint32_t", "description": "Number of packet errors"}
            ]
        },
        "40": {
            "name": "file_write_basic",
            "description": "Write a file to the device",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_NETWORK",
            "rpc_data": true,
            "request_params": [
                {"name": "action", "type": "enum rpc_enum_file_action", "description": "Action to apply to written file"},
                {"name": "file_crc", "type": "uint32_t", "description": "Expected file CRC"}
            ],
            "response_params": [
                {"name": "recv_len", "type": "uint32_t", "description": "Number of bytes received"},
                {"name": "recv_crc", "type": "uint32_t", "description": "CRC of bytes received"}
            ]
        },
        "41": {
            "name": "annotate",
            "description": "Write an annotation to the device",
            "depends_on": "TDF_DATA_LOGGER",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
                {"name": "logger", "type": "enum rpc_enum_data_logger", "description": "Data logger to write annotation to"},
                {"name": "timestamp", "type": "uint32_t", "description": "Timestamp (GNSS seconds) that event was observed"},
                {"name": "annotation", "type": "char", "num": 0, "description": "Event string to write"}
            ],
            "response_params": [
            ]
        },
        "50": {
            "name": "bt_connect_infuse",
            "description": "Connect to an Infuse-IoT Bluetooth device",
            "depends_on": "EPACKET_INTERFACE_BT_CENTRAL",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
                {"name": "peer", "type": "struct rpc_struct_bt_addr_le", "description": "Bluetooth LE device to connect to"},
                {"name": "conn_timeout_ms", "type": "uint16_t", "description": "Connection timeout in milliseconds"},
                {"name": "subscribe", "type": "enum rpc_enum_infuse_bt_characteristic", "description": "Chacteristics to subscribe to"},
                {"name": "inactivity_timeout_ms", "type": "uint16_t", "description": "Automatically terminate connection if no data traffic (0 = No timeout)"}
            ],
            "response_params": [
                {"name": "peer", "type": "struct rpc_struct_bt_addr_le", "description": "Bluetooth device connected to"},
                {"name": "cloud_public_key", "type": "uint8_t", "num": 32, "description": "Cloud public ECC key"},
                {"name": "device_public_key", "type": "uint8_t", "num": 32, "description": "Device public ECC key"},
                {"name": "network_id", "type": "uint32_t", "description": "Current network ID"}
            ]
        },
        "51": {
            "name": "bt_disconnect",
            "description": "Disconnect from a Bluetooth device",
            "depends_on": "BT_GATT_CLIENT",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
                {"name": "peer", "type": "struct rpc_struct_bt_addr_le", "description": "Bluetooth LE device to disconnect from"}
            ],
            "response_params": [
            ]
        },
        "52": {
            "name": "bt_file_copy_basic",
            "description": "Copy a local file to a remote device over Bluetooth",
            "depends_on": "EPACKET_INTERFACE_BT_CENTRAL && INFUSE_RPC_COMMAND_FILE_WRITE_BASIC && INFUSE_RPC_CLIENT",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
                {"name": "peer", "type": "struct rpc_struct_bt_addr_le", "description": "Bluetooth LE device to connect to"},
                {"name": "action", "type": "enum rpc_enum_file_action", "description": "Action to apply to copied file"},
                {"name": "file_idx", "type": "uint8_t", "description": "File index to copy"},
                {"name": "file_len", "type": "uint32_t", "description": "File length"},
                {"name": "file_crc", "type": "uint32_t", "description": "File CRC"},
                {"name": "ack_period", "type": "uint8_t", "description": "ACK period for data copy over Bluetooth"},
                {"name": "pipelining", "type": "uint8_t", "description": "Pipelining for the data copy"}

            ],
            "response_params": [
            ]
        },
        "53": {
            "name": "bt_file_copy_coap",
            "description": "Copy a file fetched from COAP to a remote device over Bluetooth",
            "depends_on": "INFUSE_RPC_COMMAND_COAP_DOWNLOAD && INFUSE_RPC_COMMAND_BT_FILE_COPY_BASIC",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
                {"name": "peer", "type": "struct rpc_struct_bt_addr_le", "description": "Bluetooth LE device to connect to"},
                {"name": "conn_timeout_ms", "type": "uint16_t", "description": "Connection timeout in milliseconds"},
                {"name": "action", "type": "enum rpc_enum_file_action", "description": "Action to apply to copied file"},
                {"name": "file_idx", "type": "uint8_t", "description": "File index to use for storage"},
                {"name": "ack_period", "type": "uint8_t", "description": "ACK period for data copy over Bluetooth"},
                {"name": "pipelining", "type": "uint8_t", "description": "Pipelining for the data copy"},
                {"name": "server_address", "type": "char", "num": 48, "description": "COAP server address (e.g. coap.dev.infuse-iot.com)"},
                {"name": "server_port", "type": "uint16_t", "description": "COAP server port"},
                {"name": "block_timeout_ms", "type": "uint16_t", "description": "COAP block timeout (Default 1000ms)"},
                {"name": "resource_len", "type": "uint32_t", "description": "Expected resource length (UINT32_MAX if unknown)"},
                {"name": "resource_crc", "type": "uint32_t", "description": "Expected resource CRC (UINT32_MAX if unknown)"},
                {"name": "resource", "type": "char", "num": 0, "description": "Path to file on COAP server (e.g. files/small_file)"}
            ],
            "response_params": [
                {"name": "resource_len", "type": "uint32_t", "description": "Length of resource downloaded from COAP"},
                {"name": "resource_crc", "type": "uint32_t", "description": "CRC of resource downloaded from COAP"}
            ]
        },
        "54": {
            "name": "bt_mcumgr_reboot",
            "description": "Connect to a Bluetooth device and run the MCUMGR reboot command",
            "depends_on": "BT_GATT_CLIENT",
            "default": "y if INFUSE_SDK",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
                {"name": "peer", "type": "struct rpc_struct_bt_addr_le", "description": "Bluetooth LE device to run reboot on"},
                      {"name": "conn_timeout_ms", "type": "uint16_t", "description": "Connection timeout in milliseconds"}
            ],
            "response_params": [
            ]
        },
        "60": {
            "name": "gravity_reference_update",
            "description": "Store the current accelerometer vector as the gravity reference",
            "depends_on": "INFUSE_ZBUS_CHAN_IMU && KV_STORE_KEY_GRAVITY_REFERENCE && ZBUS_RUNTIME_OBSERVERS",
            "default": "y",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "request_params": [
                {"name": "max_variance", "type": "uint16_t", "description": "Maximum axis variance to accept (0 == infinite)"}
            ],
            "response_params": [
                {"name": "reference", "type": "struct rpc_struct_xyz_s16", "description": "Updated reference vector"},
                {"name": "variance", "type": "struct rpc_struct_xyz_s16", "description": "Variance of measurements used for reference"},
                {"name": "num_samples", "type": "uint16_t", "description": "Number of samples used in the averaging"},
                {"name": "sample_period_us", "type": "uint32_t", "description": "Period between samples"}
            ]
        },
        "30000": {
            "name": "security_state",
            "description": "Query current security state and validate identity",
            "default": "y if INFUSE_SECURITY",
            "default_auth": "EPACKET_AUTH_NETWORK",
            "request_params": [
                {"name": "challenge", "type": "uint8_t", "num": 16, "description": "Random challenge data"}
            ],
            "response_params": [
                {"name": "cloud_public_key", "type": "uint8_t", "num": 32, "description": "Cloud public ECC key"},
                {"name": "device_public_key", "type": "uint8_t", "num": 32, "description": "Device public ECC key"},
                {"name": "network_id", "type": "uint32_t", "description": "Current network ID"},
                {"name": "challenge_response_type", "type": "uint8_t", "description": "Type of the challenge response"},
                {"name": "challenge_response", "type": "uint8_t", "num": 0, "description": "Challenge response data"}
            ]
        },
        "32765": {
            "name": "data_sender",
            "description": "Send multiple INFUSE_RPC_DATA packets",
            "depends_on": "ENTROPY_GENERATOR",
            "default": "y if ZTEST",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "rpc_data": true,
            "request_params": [],
            "response_params": []
        },
        "32766": {
            "name": "data_receiver",
            "description": "Receive multiple INFUSE_RPC_DATA packets",
            "depends_on": "CRC",
            "default": "y if ZTEST",
            "default_auth": "EPACKET_AUTH_DEVICE",
            "rpc_data": true,
            "request_params": [
                {"name": "unaligned_input", "type": "uint8_t", "description": "Allow unaligned input data"}
            ],
            "response_params": [
                {"name": "recv_len", "type": "uint32_t", "description": "Number of bytes received"},
                {"name": "recv_crc", "type": "uint32_t", "description": "CRC32 of bytes received"}
            ]
        },
        "32767": {
            "name": "echo",
            "description": "Echo any input data in the response",
            "default": "y if ZTEST",
            "default_auth": "EPACKET_AUTH_NETWORK",
            "request_params": [
                {"name": "array", "type": "uint8_t", "num": 0, "description": "Binary data"}
            ],
            "response_params": [
                {"name": "array", "type": "uint8_t", "num": 0, "description": "Binary data"}
            ]
        }
    }
}
