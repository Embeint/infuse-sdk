/**
 * @file
 * @brief Autogenerated KV definitions
 * @copyright 2024 Embeint Pty Ltd
 * @author scripts/west_commands/cloudgen.py
 *
 * SPDX-License-Identifier: LicenseRef-Embeint
 */

#ifndef INFUSE_SDK_INCLUDE_INFUSE_KV_DEFINITIONS_H_
#define INFUSE_SDK_INCLUDE_INFUSE_KV_DEFINITIONS_H_

#include <stdint.h>

#include <zephyr/toolchain.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief Common KV struct fields
 * @defgroup kv_struct_definitions Common KV struct fields
 * @{
 */

{% for name, info in structs.items() %}
/* {{ info['description'] }} */
struct {{ name }} {
{% for field in info['fields'] %}
{% if field['num'] == 0 %}
	uint8_t {{ field['name'] }}_num;
{% endif %}
	{{ field['type'] }} {{ field['name'] }}{{ field['array'] }};
{% endfor %}
} __packed;

{% if info['flexible']%}
/* clang-format off */
/* Compile time definition for known array length */
#define KV_STRUCT_{{ name | upper }}_VAR(num) \
	struct { \
	{% for field in info['fields'] %}
	{% if field['num'] == 0 %}
		uint8_t {{ field['name'] }}_num; \
		{{ field['type'] }} {{ field['name'] }}[num]; \
	{% else %}
		{{ field['type'] }} {{ field['name'] }}{{ field['array'] }}; \
	{% endif %}
	{% endfor %}
	} __packed
/* clang-format on */

{% endif %}
{% endfor %}
/**
 * @}
 */

/**
 * @brief Builtin KV Structure Definitions
 * @defgroup builtin_kv_definitions KV Structure Definitions
 * @{
 */

{% for info in definitions %}
/* {{ info['description'] }} */
struct kv_{{ info['name'] | lower }} {
{% for field in info['fields'] %}
	{% if 'description' in field %}
	/* {{ field['description'] }} */
	{% endif %}
	{% if field['num'] == 0 %}
	uint8_t {{ field['name'] }}_num;
	{% endif %}
	{{ field['type'] }} {{ field['name'] }}{{ field['array'] }};
{% endfor %}
} __packed;

{% if info['flexible']%}
/* clang-format off */
/* Compile time definition for known array length */
#define _KV_KEY_{{ info['name'] | upper }}_VAR(num) \
	struct { \
	{% for field in info['fields'] %}
	{% if field['flexible'] %}
		KV_STRUCT_{{ field['flexible'] | upper }}_VAR(num) {{ field['name'] }}; \
	{% elif field['num'] == 0 %}
		uint8_t {{ field['name'] }}_num; \
		{{ field['type'] }} {{ field['name'] }}[num]; \
	{% else %}
		{{ field['type'] }} {{ field['name'] }}{{ field['array'] }}; \
	{% endif %}
	{% endfor %}
	} __packed
/* clang-format on */

{% endif %}
{% endfor %}
/* EIS builtin KV definitions */
enum kv_builtin_id {
{% for info in definitions %}
	KV_KEY_{{ info['name'] | upper }} = {{ info['key'] }},
{% endfor %}
	/* End of builtin KV range */
	KV_KEY_BUILTIN_END = 1024,
};

/* Size of builtin KV definitions */
enum kv_builtin_size {
{% for info in definitions %}
{% if not info['flexible'] %}
	_KV_KEY_{{ info['name'] | upper }}_SIZE = sizeof(struct kv_{{ info['name'] | lower }}),
{% endif %}
{% endfor %}
};

/* clang-format off */
/* Types of builtin KV definitions */
{% for info in definitions %}
#define _KV_KEY_{{ info['name'] | upper }}_TYPE struct kv_{{ info['name'] | lower }}
{% endfor %}
/* clang-format on */

/* Convert key ID to key type */
#define KV_KEY_TYPE(key) _##key##_TYPE

#define _KV_KEY_TYPE_VAR_EXEC(macro, num) macro(num)

/* Convert key ID to key type */
#define KV_KEY_TYPE_VAR(key, num) _KV_KEY_TYPE_VAR_EXEC(_##key##_VAR, num)

/* Helper for generating compile time constant `struct kv_string` */
#define KV_STRING_CONST(name, val) KV_STRUCT_KV_STRING_VAR(sizeof(val)) name = {sizeof(val), val};

/**
 * @}
 */

#ifdef __cplusplus
}
#endif

#endif /* INFUSE_SDK_INCLUDE_INFUSE_KV_DEFINITIONS_H_ */
