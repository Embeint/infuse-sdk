/**
 * @file
 * @brief Autogenerated KV definitions
 * @copyright 2024 Embeint Holdings Pty Ltd
 * @author scripts/west_commands/cloudgen.py
 *
 * INFUSE-IOT-AUTOGENERATED
 *
 * SPDX-License-Identifier: FSL-1.1-ALv2
 */

#ifndef INFUSE_SDK_INCLUDE_GENERATED_KV_DEFINITIONS_H_
#define INFUSE_SDK_INCLUDE_GENERATED_KV_DEFINITIONS_H_

#include <stdint.h>

#include <zephyr/toolchain.h>
#include <zephyr/sys/util_macro.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief Common KV struct fields
 * @defgroup kv_struct_definitions Common KV struct fields
 * @{
 */

{% for name, info in structs.items() %}
/** {{ info['description'] }} */
struct {{ name }} {
{% for field in info['fields'] %}
{% if field['num'] == 0 %}
{% if info['fields']|length == 1 %}
	uint8_t {{ field['name'] }}_num;
{% endif %}
{% endif %}
	{{ field['type'] }} {{ field['name'] }}{{ field['array'] }};
{% endfor %}
} __packed;

{% if info['flexible']%}
/* clang-format off */
/** Compile time definition for known array length */
#define KV_STRUCT_{{ name | upper }}_VAR(num) \
	struct { \
	{% for field in info['fields'] %}
	{% if field['num'] == 0 %}
	{% if info['fields']|length == 1 %}
		uint8_t {{ field['name'] }}_num; \
	{% endif %}
		{{ field['type'] }} {{ field['name'] }}[num]; \
	{% else %}
		{{ field['type'] }} {{ field['name'] }}{{ field['array'] }}; \
	{% endif %}
	{% endfor %}
	} __packed
/* clang-format on */

{% endif %}
{% endfor %}
/**
 * @}
 */

/**
 * @brief Built-in KV Structure Definitions
 * @defgroup builtin_kv_definitions KV Structure Definitions
 * @{
 */

{% for info in definitions.values() %}
/** {{ info['description'] }} */
struct kv_{{ info['name'] | lower }} {
{% for field in info['fields'] %}
	{% if 'description' in field %}
	/** {{ field['description'] }} */
	{% endif %}
	{% if field['num'] == 0 %}
	{% if info['fields']|length == 1 %}
	uint8_t {{ field['name'] }}_num;
	{% endif %}
	{% endif %}
	{{ field['type'] }} {{ field['name'] }}{{ field['array'] }};
{% endfor %}
} __packed;

{% if info['flexible']%}
/* clang-format off */
/** Compile time definition for known array length */
#define _KV_KEY_{{ info['name'] | upper }}_VAR(num) \
	struct { \
	{% for field in info['fields'] %}
	{% if field['flexible_type'] %}
		KV_STRUCT_{{ field['flexible_type'] | upper }}_VAR(num) {{ field['name'] }}; \
	{% elif field['num'] == 0 %}
	{% if info['fields']|length == 1 %}
		uint8_t {{ field['name'] }}_num; \
	{% endif %}
		{{ field['type'] }} {{ field['name'] }}[num]; \
	{% else %}
		{{ field['type'] }} {{ field['name'] }}{{ field['array'] }}; \
	{% endif %}
	{% endfor %}
	} __packed
/* clang-format on */

{% endif %}
{% endfor %}
/* Infuse-IoT builtin KV definitions */
enum kv_builtin_id {
{% for key, info in definitions.items() %}
	/** {{ info['description'] }} */
	KV_KEY_{{ info['name'] | upper }} = {{ key }},
{% if 'range' in info %}
#ifdef CONFIG_KV_STORE_KEY_{{ info['name'] }}_RANGE
	/** End of currently enabled KV_KEY_{{ info['name'] | upper }} range */
	KV_KEY_{{ info['name'] | upper }}_END = {{ key }} + CONFIG_KV_STORE_KEY_{{ info['name'] }}_RANGE - 1,
#endif
	/** Maximum number of KV_KEY_{{ info['name'] | upper }} slots that can be enabled */
	KV_KEY_{{ info['name'] | upper }}_MAX = {{ key + info['range'] - 1 }},
{% endif %}
{% endfor %}
	/** End of builtin KV range */
	KV_KEY_BUILTIN_END = 32768,
};

/** Size of builtin KV definitions */
enum kv_builtin_size {
{% for info in definitions.values() %}
{% if not info['flexible'] %}
	_KV_KEY_{{ info['name'] | upper }}_SIZE = sizeof(struct kv_{{ info['name'] | lower }}),
{% endif %}
{% endfor %}
};

/* clang-format off */
/* Types of builtin KV definitions */
{% for info in definitions.values() %}
#define _KV_KEY_{{ info['name'] | upper }}_TYPE struct kv_{{ info['name'] | lower }}
{% endfor %}
/* clang-format on */

/* clang-format off */
/** Number of KV pairs that can be reflected */
#define KV_REFLECT_NUM ( \
{% for info in definitions.values() %}
{% if info.get('reflect', false) %}
	IF_ENABLED(CONFIG_KV_STORE_KEY_{{ info['name'] }}, \
		   ({{info['range_val']}} +)) \
{% endif %}
{% endfor %}
	0)
/* clang-format on */

/** Convert key ID to key type */
#define KV_KEY_TYPE(key) _##key##_TYPE

#define _KV_KEY_TYPE_VAR_EXEC(macro, num) macro(num)

/** Convert key ID to key type */
#define KV_KEY_TYPE_VAR(key, num) _KV_KEY_TYPE_VAR_EXEC(_##key##_VAR, num)

/** Helper for generating compile time constant `struct kv_string` */
#define KV_STRING_CONST(name, val) KV_STRUCT_KV_STRING_VAR(sizeof(val)) name = {sizeof(val), val};

/** Flags that can be applied to a slot */
enum kv_slot_flags {
	/** KV reflection enabled for the slot */
	KV_FLAGS_REFLECT = BIT(0),
	/** Value can not be read by external actors */
	KV_FLAGS_WRITE_ONLY = BIT(1),
	/** Value can not be written by external actors */
	KV_FLAGS_READ_ONLY = BIT(2),
};

/** Key value slot description */
struct key_value_slot_definition {
	/** Base key ID for slot */
	uint16_t key;
	/** Number of IDs used by the slot */
	uint8_t range;
	/** Bitmask of @ref kv_slot_flags for slot */
	uint8_t flags;
};

#ifdef _KV_SLOTS_ARRAY_DEFINE
static struct key_value_slot_definition _KV_SLOTS_ARRAY_DEFINE[] = {
{% for base_id, info in definitions.items() %}
#ifdef CONFIG_KV_STORE_KEY_{{ info['name'] }}
	{
		.key = KV_KEY_{{ info['name'] }},
		.range = {{ info['range_val'] }},
		.flags = {{ info['flags'] }},
	},
#endif /* CONFIG_KV_STORE_KEY_{{ info['name'] }} */
{% endfor %}
};
#endif /* _KV_SLOTS_ARRAY_DEFINE */

/**
 * @}
 */

#ifdef __cplusplus
}
#endif

#endif /* INFUSE_SDK_INCLUDE_GENERATED_KV_DEFINITIONS_H_ */
