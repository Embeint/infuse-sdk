#!/usr/bin/env python3

"""Autogenerated TDF decoding logic"""

import ctypes

from collections.abc import Generator

class structs:
    class _struct_type(ctypes.LittleEndianStructure):
        def iter_fields(self) -> Generator[str, ctypes._SimpleCData]:
            for field in self._fields_:
                if field[0][0] == '_':
                    f_name = field[0][1:]
                else:
                    f_name = field[0]
                val = getattr(self, f_name)
                yield f_name, val

{% for name, info in structs.items() %}
    class {{ name }}(_struct_type):
        """{{ info['description'] }}"""
        _fields_ = [
{% for field in info['fields'] %}
	        ('{{ field['name'] }}', {{ field['py_type'] }}),
{% endfor %}
        ]
        _pack_ = 1

{% endfor %}
class readings:
    class _reading_type(ctypes.LittleEndianStructure):
        def iter_fields(self) -> Generator[str, ctypes._SimpleCData, str, str]:
            for field in self._fields_:
                if field[0][0] == '_':
                    f_name = field[0][1:]
                else:
                    f_name = field[0]
                val = getattr(self, f_name)
                if isinstance(val, ctypes.LittleEndianStructure):
                    for subfield_name, subfield_val in val.iter_fields():
                        yield f'{f_name}.{subfield_name}', subfield_val, ''
                else:
                    yield f_name, val, self._postfix_[f_name]

{% for tdf_id, info in definitions.items() %}
    class {{ info['name'] | lower }}(_reading_type):
        """{{ info['description'] }}"""
        name = "{{ info['name'] }}"
        _fields_ = [
{% for field in info['fields'] %}
	        ('{{ field['py_name'] }}', {{ field['py_type'] }}),
{% endfor %}
        ]
        _pack_ = 1
        _postfix_ = {
{% for field in info['fields'] %}
	        '{{ field['name'] }}': '{{ field.get("display_postfix", '') }}',
{% endfor %}
        }
{% for conv in info['conversions'] %}

        @property
        def {{ conv['name'] }}(self):
            return self._{{ conv['name'] }}{{ conv['conv']}}
{% endfor %}

{% endfor %}
id_type_mapping = {
{% for tdf_id, info in definitions.items() %}
    {{ tdf_id }}: readings.{{ info['name'] | lower }},
{% endfor %}
}
