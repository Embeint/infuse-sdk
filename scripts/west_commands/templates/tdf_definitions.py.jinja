#!/usr/bin/env python3
# mypy: ignore-errors
"""Autogenerated TDF decoding logic"""

import ctypes

from infuse_iot.generated.tdf_base import TdfReadingBase, TdfStructBase


class structs:
{% if extensions %}
    EXTENSIONS = True

{% endif %}
{% for name, info in structs.items() %}
{% if extensions == info.get('extension', False) %}
    class {{ name }}(TdfStructBase):
        """{{ info['description'] }}"""

        _fields_ = [
{% for field in info['fields'] %}
            ("{{ field['py_name'] }}", {{ field['py_type'] }}),
{% endfor %}
        ]
        _pack_ = 1
        _postfix_ = {
{% for fmt in info['displays'] %}
            "{{ fmt['name'] }}": {{ fmt['postfix'] }},
{% endfor %}
        }
        _display_fmt_ = {
{% for fmt in info['displays'] %}
            "{{ fmt['name'] }}": {{ fmt['fmt'] }},
{% endfor %}
        }
{% for conv in info['conversions'] %}

        @property
        def {{ conv['name'] }}(self):
            return {{ conv['conv']}}
{% endfor %}

{% endif %}
{% endfor %}

class readings:
{% if extensions %}
    EXTENSIONS = True

{% endif %}
{% for tdf_id, info in definitions.items() %}
{% if extensions == info.get('extension', False) %}
    class {{ info['name'] | lower }}(TdfReadingBase):
        """{{ info['description'] }}"""

        ID = {{ tdf_id }}
        NAME = "{{ info['name'] }}"
        _fields_ = [
{% for field in info['fields'] %}
            ("{{ field['py_name'] }}", {{ field['py_type'] }}),
{% endfor %}
        ]
        _pack_ = 1
        _postfix_ = {
{% for fmt in info['displays'] %}
            "{{ fmt['name'] }}": {{ fmt['postfix'] }},
{% endfor %}
        }
        _display_fmt_ = {
{% for fmt in info['displays'] %}
            "{{ fmt['name'] }}": {{ fmt['fmt'] }},
{% endfor %}
        }
{% for conv in info['conversions'] %}

        @property
        def {{ conv['name'] }}(self):
            return {{ conv['conv']}}
{% endfor %}

{% endif %}
{% endfor %}

id_type_mapping: dict[int, type[TdfReadingBase]] = {
{% for tdf_id, info in definitions.items() %}
{% if extensions == info.get('extension', False) %}
    readings.{{ info['name'] | lower }}.ID: readings.{{ info['name'] | lower }},
{% endif %}
{% endfor %}
}

__all__ = [
     'structs',
     'readings',
     'id_type_mapping',
]
