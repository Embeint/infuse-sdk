/**
 * @file
 * @brief Autogenerated TDF definitions
 * @copyright 2024 Embeint Inc
 * @author scripts/west_commands/cloudgen.py
 *
 * SPDX-License-Identifier: LicenseRef-Embeint
 */

#ifndef INFUSE_SDK_INCLUDE_INFUSE_TDF_DEFINITIONS_H_
#define INFUSE_SDK_INCLUDE_INFUSE_TDF_DEFINITIONS_H_

#include <stdint.h>

#include <zephyr/toolchain.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief Common TDF struct fields
 * @defgroup tdf_struct_definitions Common TDF struct fields
 * @{
 */

{% for name, info in structs.items() %}
/** {{ info['description'] }} */
struct {{ name }} {
{% for field in info['fields'] %}
	{% if 'description' in field %}
	/** {{ field['description'] }} */
	{% endif %}
	{{ field['type'] }} {{ field['name'] }}{{ field["array"] }};
{% endfor %}
} __packed;

{% endfor %}
/**
 * @}
 */

/**
 * @brief Built-in TDF Structure Definitions
 * @defgroup builtin_tdf_definitions TDF Structure Definitions
 * @{
 */

{% for id, info in definitions.items() %}
/** {{ info['description'] }} */
struct tdf_{{ info['name'] | lower }} {
{% for field in info['fields'] %}
	{% if 'description' in field %}
	/** {{ field['description'] }} */
	{% endif %}
	{{ field['type'] }} {{ field['name'] }}{{ field["array"] }};
{% endfor %}
} __packed;

{% if 'flexible' in info %}
/** Define a variant of @ref tdf_{{ info['name'] | lower }} with a constant length */
#define TDF_{{ info['name'] }}_VAR(_name, _count) \
	struct _name { \
{% for field in info['fields'] %}
{% if field.get('num', None) == 0 %}
		{{ field['type'] }} {{ field['name'] }}[_count]; \
{% else %}
		{{ field['type'] }} {{ field['name'] }}{{ field["array"] }}; \
{% endif %}
{% endfor %}
	} __packed;
{% endif %}

{% endfor %}
/** Infuse-IoT builtin TDF definitions */
enum tdf_builtin_id {
{% for id, info in definitions.items() %}
	/** {{ info['description'] }} */
	TDF_{{ info['name'] | upper }} = {{ id }},
{% endfor %}
	/** End of builtin TDF range */
	TDF_BUILTIN_END = 1024,
};

/** @cond INTERNAL_HIDDEN */

/** Size of builtin TDF definitions */
enum tdf_builtin_size {
{% for id, info in definitions.items() %}
	_TDF_{{ info['name'] | upper }}_SIZE = sizeof(struct tdf_{{ info['name'] | lower }}),
{% endfor %}
};

/** @endcond */

/**
 * @}
 */

#ifdef __cplusplus
}
#endif

#endif /* INFUSE_SDK_INCLUDE_INFUSE_TDF_DEFINITIONS_H_ */
