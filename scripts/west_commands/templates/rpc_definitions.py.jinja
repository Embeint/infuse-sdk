#!/usr/bin/env python3
# mypy: ignore-errors

"""Autogenerated RPC definitions"""

import ctypes
{% if has_enums %}
import enum
{% endif %}

from infuse_iot.util.ctypes import VLACompatLittleEndianStruct

{% for name, info in structs.items() %}
{% if extensions == info.get('extension', False) %}

class {{ name }}(VLACompatLittleEndianStruct):
    """{{ info['description'] }}"""

    _fields_ = [
{% for field in info['fields'] %}
{% if field['num'] != 0 %}
        ("{{ field['py_name'] }}", {{ field['py_type'] }}),
{% endif %}
{% endfor %}
    ]
{% if 'flexible' in info %}
    vla_field = ("{{ info['fields'][-1]['name'] }}", {{ info['fields'][-1]['py_type'] }})
{% endif %}
{% if 'counted_by' in info %}
    vla_counted_by = "{{ info['counted_by'] }}"
{% endif %}
    _pack_ = 1

{% endif %}
{% endfor %}
{% for name, info in enums.items() %}
{% if extensions == info.get('extension', False) %}

class {{ name }}(enum.IntEnum):
    """{{ info['description'] }}"""

{% for value in info['values'] %}
    {{ value['py_name'] }} = {{ value['value'] }}
{% endfor %}

{% endif %}
{% endfor -%}

class RPCDefinitionBase:
    NAME: str
    HELP: str
    DESCRIPTION: str
    COMMAND_ID: int

{% for command_id, info in commands.items() %}
{% if extensions == info.get('extension', False) %}

class {{ info['name'] }}(RPCDefinitionBase):
    """{{ info['description'] }}"""

    NAME = "{{ info['name'] }}"
    HELP = "{{ info['description'] }}"
    DESCRIPTION = "{{ info['description'] }}"
    COMMAND_ID = {{ command_id }}

    class request(VLACompatLittleEndianStruct):
        _fields_ = [
{% for field in info['request_params'] %}
{% if field['num'] != 0 %}
            ("{{ field['name'] }}", {{ field['py_type'] }}),
{% endif %}
{% endfor %}
        ]
{% if info['request_params']|length and info['request_params'][-1].get('num') == 0 %}
        vla_field = ("{{ info['request_params'][-1]['name'] }}", {{ info['request_params'][-1]['py_type'] }})
{% endif %}
        _pack_ = 1

    class response(VLACompatLittleEndianStruct):
        _fields_ = [
{% for field in info['response_params'] %}
{% if field['num'] != 0 %}
            ("{{ field['name'] }}", {{ field['py_type'] }}),
{% endif %}
{% endfor %}
        ]
{% if info['response_params']|length and info['response_params'][-1].get('num') == 0 %}
        vla_field = ("{{ info['response_params'][-1]['name'] }}", {{ info['response_params'][-1]['py_type'] }})
{% endif %}
        _pack_ = 1

{% endif %}
{% endfor -%}

id_type_mapping: dict[int, type[RPCDefinitionBase]] = {
{% for command_id, info in commands.items() %}
{% if extensions == info.get('extension', False) %}
    {{ info['name'] | lower }}.COMMAND_ID: {{ info['name'] | lower }},
{% endif %}
{% endfor %}
}

__all__ = [
      'id_type_mapping',
{% for name, info in structs.items() %}
{% if extensions == info.get('extension', False) %}
    '{{ name }}',
{% endif %}
{% endfor -%}
{% for name, info in enums.items() %}
{% if extensions == info.get('extension', False) %}
    '{{ name }}',
{% endif %}
{% endfor -%}
{% for info in commands.values() %}
{% if extensions == info.get('extension', False) %}
    '{{ info['name'] }}',
{% endif %}
{% endfor -%}
]
