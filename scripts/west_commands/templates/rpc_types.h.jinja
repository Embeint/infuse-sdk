/**
 * @file
 * @brief Autogenerated RPC definitions
 * @copyright 2024 Embeint Holdings Pty Ltd
 * @author scripts/west_commands/cloudgen.py
 *
 * INFUSE-IOT-AUTOGENERATED
 *
 * SPDX-License-Identifier: FSL-1.1-ALv2
 */

#ifndef INFUSE_SDK_INCLUDE_GENERATED_RPC_TYPES_H_
#define INFUSE_SDK_INCLUDE_GENERATED_RPC_TYPES_H_

#include <stdint.h>

#include <zephyr/toolchain.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief RPC packet headers
 * @defgroup rpc_packet_headers RPC packet headers
 * @{
 */

/**
 * @brief Header for @ref INFUSE_RPC_CMD packet
 */
struct infuse_rpc_req_header {
	/** Unique request ID */
	uint32_t request_id;
	/** Command to run */
	uint16_t command_id;
} __packed;

/**
 * @brief Secondary header for RPCs expecting @ref INFUSE_RPC_DATA
 */
struct infuse_rpc_req_data_header {
	/** Amount of data expected to be transferred */
	uint32_t size;
	/** Send an @ref INFUSE_RPC_DATA_ACK response every N packets received */
	uint8_t rx_ack_period;
} __packed;

/**
 * @brief @ref INFUSE_RPC_DATA payload
 */
struct infuse_rpc_data {
	/** Request ID matching original @ref infuse_rpc_req_header */
	uint32_t request_id;
	/** Byte offset of data in this payload */
	uint32_t offset;
	/** Data payload */
	uint8_t payload[];
} __packed;

/**
 * @brief @ref INFUSE_RPC_DATA_ACK packet
 */
struct infuse_rpc_data_ack {
	/** Request ID matching original @ref infuse_rpc_req_header */
	uint32_t request_id;
	/** Byte offsets received */
	uint32_t offsets[];
} __packed;

/**
 * @brief Header for @ref INFUSE_RPC_RSP packet
 */
struct infuse_rpc_rsp_header {
	/** Request ID matching original @ref infuse_rpc_req_header */
	uint32_t request_id;
	/** Command that was run */
	uint16_t command_id;
	/** Result of the RPC */
	int16_t return_code;
} __packed;

/**
 * @}
 */

/* clang-format off */

/**
 * @brief Common RPC struct fields
 * @defgroup rpc_struct_definitions Common RPC struct fields
 * @{
 */

{% for name, info in structs.items() %}
/** {{ info['description'] }} */
struct {{ name }} {
{% for field in info['fields'] %}
{% if 'description' in field %}
	/** {{ field['description'] }} */
{% endif %}
	{{ field['type'] }} {{ field['name'] }}{{ field['array'] }};
{% endfor %}
} __packed;

{% endfor %}
{% for name, info in enums.items() %}
/** {{ info['description'] }} */
enum {{ name }} {
{% for value in info['values'] %}
{% if 'description' in value %}
	/** {{ value['description'] }} */
{% endif %}
	{{ name | upper }}_{{ value['name'] }} = {{ value['value'] }},
{% endfor %}
};

{% endfor %}
/**
 * @}
 */

/**
 * @brief Built-in RPC definitions
 * @defgroup builtin_rpc_definitions Built-in RPC definitions
 * @{
 */

/** Infuse-IoT builtin RPC commands */
enum rpc_builtin_id {
{% for id, info in commands.items() %}
	/** {{ info['description' ]}} */
	RPC_ID_{{ info['name'] | upper }} = {{ id }},
{% endfor %}
	/** End of builtin RPC range */
	RPC_BUILTIN_END = 32768,
};

{% for id, info in commands.items() %}
/** {{ info['description'] }} */
struct rpc_{{ info['name'] }}_request {
	struct infuse_rpc_req_header header;
{% if 'rpc_data' in info %}
	struct infuse_rpc_req_data_header data_header;
{% endif %}
{% for field in info['request_params'] %}
	{% if 'description' in field %}
	/** {{ field['description'] }} */
	{% endif %}
	{{ field['type'] }} {{ field['name'] }}{{ field['array'] }};
{% endfor %}
} __packed;

struct rpc_{{ info['name'] }}_response {
	struct infuse_rpc_rsp_header header;
{% for field in info['response_params'] %}
	{% if 'description' in field %}
	/** {{ field['description'] }} */
	{% endif %}
	{{ field['type'] }} {{ field['name'] }}{{ field['array'] }};
{% endfor %}
} __packed;

{% endfor %}
/**
 * @}
 */

/* clang-format on */

#ifdef __cplusplus
}
#endif

#endif /* INFUSE_SDK_INCLUDE_GENERATED_RPC_TYPES_H_ */
