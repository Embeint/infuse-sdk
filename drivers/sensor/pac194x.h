/**
 * @file
 * @copyright 2025 Embeint Holdings Pty Ltd
 * @author Jordan Yates <jordan@embeint.com>
 *
 * SPDX-License-Identifier: FSL-1.1-ALv2
 */

#ifndef INFUSE_SDK_DRIVERS_SENSOR_PAC194X_H_
#define INFUSE_SDK_DRIVERS_SENSOR_PAC194X_H_

#include <zephyr/drivers/gpio.h>
#include <zephyr/drivers/i2c.h>

#ifdef __cplusplus
extern "C" {
#endif

enum pac194x_reg {
	PAC194X_REG_REFRESH = 0x00,
	PAC194X_REG_CTRL = 0x01,
	PAC194X_REG_ACC_COUNT = 0x02,
	PAC194X_REG_VACC_0 = 0x03,
	PAC194X_REG_VACC_1 = 0x04,
	PAC194X_REG_VACC_2 = 0x05,
	PAC194X_REG_VACC_3 = 0x06,
	PAC194X_REG_VBUS_0 = 0x07,
	PAC194X_REG_VBUS_1 = 0x08,
	PAC194X_REG_VBUS_2 = 0x09,
	PAC194X_REG_VBUS_3 = 0x0A,
	PAC194X_REG_VSENSE_0 = 0x0B,
	PAC194X_REG_VSENSE_1 = 0x0C,
	PAC194X_REG_VSENSE_2 = 0x0D,
	PAC194X_REG_VSENSE_3 = 0x0E,
	PAC194X_REG_VBUS_0_AVG = 0x0F,
	PAC194X_REG_VBUS_1_AVG = 0x10,
	PAC194X_REG_VBUS_2_AVG = 0x11,
	PAC194X_REG_VBUS_3_AVG = 0x12,
	PAC194X_REG_VSENSE_0_AVG = 0x13,
	PAC194X_REG_VSENSE_1_AVG = 0x14,
	PAC194X_REG_VSENSE_2_AVG = 0x15,
	PAC194X_REG_VSENSE_3_AVG = 0x16,
	PAC194X_REG_VPOWER_0 = 0x17,
	PAC194X_REG_VPOWER_1 = 0x18,
	PAC194X_REG_VPOWER_2 = 0x19,
	PAC194X_REG_VPOWER_3 = 0x1A,
	PAC194X_REG_SMBUS_SETTINGS = 0x1C,
	PAC194X_REG_NEG_PWR_FSR = 0x1D,
	PAC194X_REG_REFRESH_G = 0x1E,
	PAC194X_REG_REFRESH_V = 0x1F,

	PAC194X_REG_PRODUCT_ID = 0xFD,
	PAC194X_REG_MANUFACTURER_ID = 0xFE,
	PAC194X_REG_REVISION_ID = 0xFF,
};

enum pac194x_ctrl {
	PAC194X_CTRL_SLOW_ALERT_ALERT = (0b00 << 8),
	PAC194X_CTRL_SLOW_ALERT_INPUT = (0b01 << 8),
	PAC194X_CTRL_SLOW_ALERT_OUTPUT = (0b10 << 8),
	PAC194X_CTRL_SLOW_ALERT_SLOW = (0b11 << 8),
	PAC194X_CTRL_GPIO_ALERT_ALERT = (0b00 << 10),
	PAC194X_CTRL_GPIO_ALERT_INPUT = (0b01 << 10),
	PAC194X_CTRL_GPIO_ALERT_OUTPUT = (0b10 << 10),
	PAC194X_CTRL_GPIO_ALERT_SLOW = (0b11 << 10),
	PAC194X_CTRL_MODE_1024_SPS_ACCUM = (0b0000 << 12),
	PAC194X_CTRL_MODE_256_SPS_ACCUM = (0b0001 << 12),
	PAC194X_CTRL_MODE_64_SPS_ACCUM = (0b0010 << 12),
	PAC194X_CTRL_MODE_8_SPS_ACCUM = (0b0011 << 12),
	PAC194X_CTRL_MODE_1024_SPS = (0b0100 << 12),
	PAC194X_CTRL_MODE_256_SPS = (0b0101 << 12),
	PAC194X_CTRL_MODE_64_SPS = (0b0110 << 12),
	PAC194X_CTRL_MODE_8_SPS = (0b0111 << 12),
	PAC194X_CTRL_MODE_SINGLE_SHOT = (0b1000 << 12),
	PAC194X_CTRL_MODE_SINGLE_SHOT_8X = (0b1001 << 12),
	PAC194X_CTRL_MODE_FAST_MODE = (0b1010 << 12),
	PAC194X_CTRL_MODE_BURST_MODE = (0b1011 << 12),
	PAC194X_CTRL_MODE_SLEEP = (0b1111 << 12),
};

enum pac194x_product_id {
	PAC194X_PRODUCT_ID_PAC1941_1 = 0b01101000,
	PAC194X_PRODUCT_ID_PAC1942_1 = 0b01101001,
	PAC194X_PRODUCT_ID_PAC1943_1 = 0b01101010,
	PAC194X_PRODUCT_ID_PAC1944_1 = 0b01101011,
	PAC194X_PRODUCT_ID_PAC1941_2 = 0b01101100,
	PAC194X_PRODUCT_ID_PAC1942_2 = 0b01101101,
};

enum pac194x_manufacturer_id {
	PAC194X_MANUFACTURER_ID_MICROCHIP = 0x54,
};

struct pac194x_config {
	struct i2c_dt_spec bus;
	struct gpio_dt_spec power_down_gpio;
	int32_t full_scale_current_microamps;
	uint16_t fsr_config;
	uint8_t vbus_shift;
	uint8_t vsense_shift;
	enum pac194x_product_id product_id;
};

struct pac194x_data {
	uint16_t v_bus;
	int16_t v_sense;
};

#ifdef __cplusplus
}
#endif

#endif /* INFUSE_SDK_DRIVERS_SENSOR_PAC194X_H_ */
