/**
 * @file
 * @copyright 2025 Embeint Holdings Pty Ltd
 * @author Jordan Yates <jordan@embeint.com>
 *
 * SPDX-License-Identifier: FSL-1.1-ALv2
 */

#ifndef INFUSE_SDK_DRIVERS_IMU_LSM6DSO_LSM6DSO_H_
#define INFUSE_SDK_DRIVERS_IMU_LSM6DSO_LSM6DSO_H_

#include <zephyr/sys/util_macro.h>
#include <stdint.h>

#include <zephyr/drivers/i2c.h>
#include <zephyr/drivers/spi.h>

#ifdef __cplusplus
extern "C" {
#endif

enum {
	LSM6DSO_REG_FUNC_CFG_ACCESS = 0x01,
	LSM6DSO_REG_PIN_CTRL = 0x02,
	LSM6DSO_REG_FIFO_CTRL1 = 0x07,
	LSM6DSO_REG_FIFO_CTRL2 = 0x08,
	LSM6DSO_REG_FIFO_CTRL3 = 0x09,
	LSM6DSO_REG_FIFO_CTRL4 = 0x0A,
	LSM6DSO_REG_COUNTER_BDR_REG1 = 0x0B,
	LSM6DSO_REG_COUNTER_BDR_REG2 = 0x0C,
	LSM6DSO_REG_INT1_CTRL = 0x0D,
	LSM6DSO_REG_INT2_CTRL = 0x0E,
	LSM6DSO_REG_WHO_AM_I = 0x0F,
	LSM6DSO_REG_CTRL1_XL = 0x10,
	LSM6DSO_REG_CTRL2_G = 0x11,
	LSM6DSO_REG_CTRL3_C = 0x12,
	LSM6DSO_REG_CTRL4_C = 0x13,
	LSM6DSO_REG_CTRL5_C = 0x14,
	LSM6DSO_REG_CTRL6_C = 0x15,
	LSM6DSO_REG_CTRL7_G = 0x16,
	LSM6DSO_REG_CTRL8_XL = 0x17,
	LSM6DSO_REG_CTRL9_XL = 0x18,
	LSM6DSO_REG_CTRL10_C = 0x19,
	LSM6DSO_REG_ALL_INT_SRC = 0x1A,
	LSM6DSO_REG_WAKE_UP_SRC = 0x1B,
	LSM6DSO_REG_TAP_SRC = 0x1C,
	LSM6DSO_REG_D6D_SRC = 0x1D,
	LSM6DSO_REG_STATUS_REG = 0x1E,
	LSM6DSO_REG_OUT_TEMP_L = 0x20,
	LSM6DSO_REG_OUT_TEMP_H = 0x21,
	LSM6DSO_REG_OUTX_L_G = 0x22,
	LSM6DSO_REG_OUTX_H_G = 0x23,
	LSM6DSO_REG_OUTY_L_G = 0x24,
	LSM6DSO_REG_OUTY_H_G = 0x25,
	LSM6DSO_REG_OUTZ_L_G = 0x26,
	LSM6DSO_REG_OUTZ_H_G = 0x27,
	LSM6DSO_REG_OUTX_L_A = 0x28,
	LSM6DSO_REG_OUTX_H_A = 0x29,
	LSM6DSO_REG_OUTY_L_A = 0x2A,
	LSM6DSO_REG_OUTY_H_A = 0x2B,
	LSM6DSO_REG_OUTZ_L_A = 0x2C,
	LSM6DSO_REG_OUTZ_H_A = 0x2D,
	LSM6DSO_REG_FIFO_STATUS1 = 0x3A,
	LSM6DSO_REG_FIFO_STATUS2 = 0x3B,
	LSM6DSO_REG_TIMESTAMP0 = 0x40,
	LSM6DSO_REG_TIMESTAMP1 = 0x41,
	LSM6DSO_REG_TIMESTAMP2 = 0x42,
	LSM6DSO_REG_TIMESTAMP3 = 0x43,
	LSM6DSO_REG_TAP_CFG0 = 0x56,
	LSM6DSO_REG_TAP_CFG1 = 0x57,
	LSM6DSO_REG_TAP_CFG2 = 0x58,
	LSM6DSO_REG_TAP_THS_6D = 0x59,
	LSM6DSO_REG_INT_DUR2 = 0x5A,
	LSM6DSO_REG_WAKE_UP_THS = 0x5B,
	LSM6DSO_REG_WAKE_UP_DUR = 0x5C,
	LSM6DSO_REG_FREE_FALL = 0x5D,
	LSM6DSO_REG_MD1_CFG = 0x5E,
	LSM6DSO_REG_MD2_CFG = 0x5F,
	LSM6DSO_REG_I3C_BUS_AVB = 0x62,
	LSM6DSO_REG_INTERNAL_FREQ_FINE = 0x63,
	LSM6DSO_REG_INT_OIS = 0x6F,
	LSM6DSO_REG_CTRL1_OIS = 0x70,
	LSM6DSO_REG_CTRL2_OIS = 0x71,
	LSM6DSO_REG_CTRL3_OIS = 0x72,
	LSM6DSO_REG_X_OFS_USR = 0x73,
	LSM6DSO_REG_Y_OFS_USR = 0x74,
	LSM6DSO_REG_Z_OFS_USR = 0x75,
	LSM6DSO_REG_FIFO_DATA_OUT_TAG = 0x78,
	LSM6DSO_REG_FIFO_DATA_OUT_X_L = 0x79,
	LSM6DSO_REG_FIFO_DATA_OUT_X_H = 0x7A,
	LSM6DSO_REG_FIFO_DATA_OUT_Y_L = 0x7B,
	LSM6DSO_REG_FIFO_DATA_OUT_Y_H = 0x7C,
	LSM6DSO_REG_FIFO_DATA_OUT_Z_L = 0x7D,
	LSM6DSO_REG_FIFO_DATA_OUT_Z_H = 0x7E,
};

enum lsm6dso_fifo_ctrl2 {
	LSM6DSO_FIFO_CTRL2_ODRCHG_EN = BIT(4),
	LSM6DSO_FIFO_CTRL2_FIFO_COMPR_RT_EN = BIT(6),
	LSM6DSO_FIFO_CTRL2_STOP_ON_WTM = BIT(7),
};

enum lsm6dso_fifo_ctrl3 {
	LSM6DSO_FIFO_CTRL3_BDR_GY_DIS = (0 << 4),
	LSM6DSO_FIFO_CTRL3_BDR_GY_12HZ5 = (1 << 4),
	LSM6DSO_FIFO_CTRL3_BDR_GY_26HZ = (2 << 4),
	LSM6DSO_FIFO_CTRL3_BDR_GY_52HZ = (3 << 4),
	LSM6DSO_FIFO_CTRL3_BDR_GY_104HZ = (4 << 4),
	LSM6DSO_FIFO_CTRL3_BDR_GY_208HZ = (5 << 4),
	LSM6DSO_FIFO_CTRL3_BDR_GY_416HZ = (6 << 4),
	LSM6DSO_FIFO_CTRL3_BDR_GY_833HZ = (7 << 4),
	LSM6DSO_FIFO_CTRL3_BDR_GY_1667HZ = (8 << 4),
	LSM6DSO_FIFO_CTRL3_BDR_GY_3333HZ = (9 << 4),
	LSM6DSO_FIFO_CTRL3_BDR_GY_6667HZ = (10 << 4),
	LSM6DSO_FIFO_CTRL3_BDR_GY_6HZ5HZ = (11 << 4),
	LSM6DSO_FIFO_CTRL3_BDR_XL_DIS = (0 << 0),
	LSM6DSO_FIFO_CTRL3_BDR_XL_12HZ5 = (1 << 0),
	LSM6DSO_FIFO_CTRL3_BDR_XL_26HZ = (2 << 0),
	LSM6DSO_FIFO_CTRL3_BDR_XL_52HZ = (3 << 0),
	LSM6DSO_FIFO_CTRL3_BDR_XL_104HZ = (4 << 0),
	LSM6DSO_FIFO_CTRL3_BDR_XL_208HZ = (5 << 0),
	LSM6DSO_FIFO_CTRL3_BDR_XL_416HZ = (6 << 0),
	LSM6DSO_FIFO_CTRL3_BDR_XL_833HZ = (7 << 0),
	LSM6DSO_FIFO_CTRL3_BDR_XL_1667HZ = (8 << 0),
	LSM6DSO_FIFO_CTRL3_BDR_XL_3333HZ = (9 << 0),
	LSM6DSO_FIFO_CTRL3_BDR_XL_6667HZ = (10 << 0),
	LSM6DSO_FIFO_CTRL3_BDR_XL_1HZ5 = (11 << 0),
};

enum lsm6dso_fifo_ctrl4 {
	LSM6DSO_FIFO_CTRL4_FIFO_MODE_BYPASS = 0,
	LSM6DSO_FIFO_CTRL4_FIFO_MODE_FIFO = 1,
	LSM6DSO_FIFO_CTRL4_FIFO_MODE_CONTINUOUS_TO_FIFO = 3,
	LSM6DSO_FIFO_CTRL4_FIFO_MODE_BYPASS_TO_CONTINUOUS = 4,
	LSM6DSO_FIFO_CTRL4_FIFO_MODE_CONTINUOUS = 6,
	LSM6DSO_FIFO_CTRL4_FIFO_MODE_BYPASS_TO_FIFO = 7,
	LSM6DSO_FIFO_CTRL4_ODR_T_BATCH_DIS = (0 << 4),
	LSM6DSO_FIFO_CTRL4_ODR_T_BATCH_1HZ6 = (1 << 4),
	LSM6DSO_FIFO_CTRL4_ODR_T_BATCH_12HZ5 = (2 << 4),
	LSM6DSO_FIFO_CTRL4_ODR_T_BATCH_52HZ = (3 << 4),
	LSM6DSO_FIFO_CTRL4_DEC_TS_BATCH_DIS = (0 << 6),
	LSM6DSO_FIFO_CTRL4_DEC_TS_BATCH_1 = (1 << 6),
	LSM6DSO_FIFO_CTRL4_DEC_TS_BATCH_8 = (2 << 6),
	LSM6DSO_FIFO_CTRL4_DEC_TS_BATCH_32 = (3 << 6),
};

enum lsm6dso_int1_ctrl {
	LSM6DSO_INT1_CTRL_DRDY_XL = BIT(0),
	LSM6DSO_INT1_CTRL_DRDY_G = BIT(1),
	LSM6DSO_INT1_CTRL_BOOT = BIT(2),
	LSM6DSO_INT1_CTRL_FIFO_TH = BIT(3),
	LSM6DSO_INT1_CTRL_FIFO_OVR = BIT(4),
	LSM6DSO_INT1_CTRL_FIFO_FULL = BIT(5),
	LSM6DSO_INT1_CTRL_CNT_BDR = BIT(6),
	LSM6DSO_INT1_CTRL_DEN_DRDY = BIT(7),
};

enum lsm6dso_int2_ctrl {
	LSM6DSO_INT2_CTRL_DRDY_XL = BIT(0),
	LSM6DSO_INT2_CTRL_DRDY_G = BIT(1),
	LSM6DSO_INT2_CTRL_DRDY_TEMP = BIT(2),
	LSM6DSO_INT2_CTRL_FIFO_TH = BIT(3),
	LSM6DSO_INT2_CTRL_FIFO_OVR = BIT(4),
	LSM6DSO_INT2_CTRL_FIFO_FULL = BIT(5),
	LSM6DSO_INT2_CTRL_CNT_BDR = BIT(6),
};

enum lsm6dso_ctrl1_xl {
	LSM6DSO_CTRL1_XL_LPF2_DIS = 0,
	LSM6DSO_CTRL1_XL_LPF2_EN = BIT(1),
	LSM6DSO_CTRL1_XL_RANGE_2G = (0 << 2),
	LSM6DSO_CTRL1_XL_RANGE_4G = (2 << 2),
	LSM6DSO_CTRL1_XL_RANGE_8G = (3 << 2),
	LSM6DSO_CTRL1_XL_RANGE_16G = (1 << 2),
	LSM6DSO_CTRL1_XL_ODR_DIS = (0 << 4),
	LSM6DSO_CTRL1_XL_ODR_12HZ5 = (1 << 4),
	LSM6DSO_CTRL1_XL_ODR_26HZ = (2 << 4),
	LSM6DSO_CTRL1_XL_ODR_52HZ = (3 << 4),
	LSM6DSO_CTRL1_XL_ODR_104HZ = (4 << 4),
	LSM6DSO_CTRL1_XL_ODR_208HZ = (5 << 4),
	LSM6DSO_CTRL1_XL_ODR_416HZ = (6 << 4),
	LSM6DSO_CTRL1_XL_ODR_833HZ = (7 << 4),
	LSM6DSO_CTRL1_XL_ODR_1667HZ = (8 << 4),
	LSM6DSO_CTRL1_XL_ODR_3333HZ = (9 << 4),
	LSM6DSO_CTRL1_XL_ODR_6667HZ = (10 << 4),
	LSM6DSO_CTRL1_XL_ODR_1HZ6 = (11 << 4),
};

enum lsm6dso_ctrl2_g {
	LSM6DSO_CTRL2_G_FS_125DPS = BIT(1),
	LSM6DSO_CTRL2_G_FS_250DPS = (0 << 2),
	LSM6DSO_CTRL2_G_FS_500DPS = (1 << 2),
	LSM6DSO_CTRL2_G_FS_1000DPS = (2 << 2),
	LSM6DSO_CTRL2_G_FS_2000DPS = (3 << 2),
	LSM6DSO_CTRL2_G_ODR_DIS = (0 << 4),
	LSM6DSO_CTRL2_G_ODR_12HZ5 = (1 << 4),
	LSM6DSO_CTRL2_G_ODR_26HZ = (2 << 4),
	LSM6DSO_CTRL2_G_ODR_52HZ = (3 << 4),
	LSM6DSO_CTRL2_G_ODR_104HZ = (4 << 4),
	LSM6DSO_CTRL2_G_ODR_208HZ = (5 << 4),
	LSM6DSO_CTRL2_G_ODR_416HZ = (6 << 4),
	LSM6DSO_CTRL2_G_ODR_833HZ = (7 << 4),
	LSM6DSO_CTRL2_G_ODR_1667HZ = (8 << 4),
	LSM6DSO_CTRL2_G_ODR_3333HZ = (9 << 4),
	LSM6DSO_CTRL2_G_ODR_6667HZ = (10 << 4),
};

enum lsm6dso_ctrl3_c {
	LSM6DSO_CTRL3_C_SW_RESET = BIT(0),
	LSM6DSO_CTRL3_C_IF_INC = BIT(2),
	LSM6DSO_CTRL3_C_SPI_4_WIRE = 0,
	LSM6DSO_CTRL3_C_SPI_3_WIRE = BIT(3),
	LSM6DSO_CTRL3_C_INT_PP = 0,
	LSM6DSO_CTRL3_C_INT_OD = BIT(4),
	LSM6DSO_CTRL3_C_INT_ACTIVE_HIGH = 0,
	LSM6DSO_CTRL3_C_INT_ACTIVE_LOW = BIT(5),
	LSM6DSO_CTRL3_C_BDU = BIT(6),
	LSM6DSO_CTRL3_C_REBOOT_MEMORY = BIT(7),
};

enum lsm6dso_ctrl4_c {
	LSM6DSO_CTRL4_C_LPF1_SEL_G = BIT(1),
	LSM6DSO_CTRL4_C_I2C_DISABLE = BIT(2),
	LSM6DSO_CTRL4_C_DRDY_MASK = BIT(3),
	LSM6DSO_CTRL4_C_INT2_ON_INT1 = BIT(5),
	LSM6DSO_CTRL4_C_SLEEP_G = BIT(6),
};

enum lsm6dso_ctrl5_c {
	LSM6DSO_CTRL5_C_SELF_TEST_XL_DIS = (0 << 0),
	LSM6DSO_CTRL5_C_SELF_TEST_XL_POS = (1 << 0),
	LSM6DSO_CTRL5_C_SELF_TEST_XL_NEG = (2 << 0),
	LSM6DSO_CTRL5_C_SELF_TEST_G_DIS = (0 << 2),
	LSM6DSO_CTRL5_C_SELF_TEST_G_POS = (1 << 2),
	LSM6DSO_CTRL5_C_SELF_TEST_G_NEG = (3 << 2),
	LSM6DSO_CTRL5_C_XL_ULTRA_LOW_POWER = BIT(7),
};

enum lsm6dso_ctrl6_c {
	LSM6DSO_CTRL6_C_XL_HIGH_PERFORMANCE_DISABLE = BIT(4),
};

enum lsm6dso_ctrl10_c {
	LSM6DSO_CTRL10_C_TIMESTAMP_EN = BIT(5),
};

enum lsm6dso_all_int_src {
	LSM6DSO_ALL_INT_SRC_FREE_FALL = BIT(0),
	LSM6DSO_ALL_INT_SRC_WAKE_UP = BIT(1),
	LSM6DSO_ALL_INT_SRC_SINGLE_TAP = BIT(2),
	LSM6DSO_ALL_INT_SRC_DOUBLE_TAP = BIT(3),
	LSM6DSO_ALL_INT_SRC_D6D_IA = BIT(4),
	LSM6DSO_ALL_INT_SRC_SLEEP_CHANGE_IA = BIT(5),
	LSM6DSO_ALL_INT_SRC_SLEEP_TIMESTAMP_ENDCOUNT = BIT(7),
};

enum lsm6dso_status_reg {
	LSM6DSO_STATUS_REG_XL_DRDY = BIT(0),
	LSM6DSO_STATUS_REG_G_DRDY = BIT(1),
	LSM6DSO_STATUS_REG_TEMP_DRDY = BIT(2),
};

enum lsm6dso_fifo_tag {
	LSM6DSO_FIFO_TAG_PARITY = BIT(0),
	LSM6DSO_FIFO_TAG_CNT_MASK = (0x03 << 1),
	LSM6DSO_FIFO_TAG_SENSOR_MASK = (0x1F << 3),
	LSM6DSO_FIFO_TAG_SENSOR_EMPTY = (0 << 3),
	LSM6DSO_FIFO_TAG_SENSOR_GYROSCOPE_NC = (1 << 3),
	LSM6DSO_FIFO_TAG_SENSOR_ACCELEROMETER_NC = (2 << 3),
	LSM6DSO_FIFO_TAG_SENSOR_TEMPERATURE = (3 << 3),
	LSM6DSO_FIFO_TAG_SENSOR_TIMESTAMP = (4 << 3),
	LSM6DSO_FIFO_TAG_SENSOR_CFG_CHANGE = (5 << 3),
};

#define LSM6DSO_WHO_AM_I  0x6C
#define LSM6DSO_FIFO_SIZE (3 * 1024)

#define LSM6DSO_XL_SELF_TEST_MIN_MG 50
#define LSM6DSO_XL_SELF_TEST_MAX_MG 1700
#define LSM6DSO_G_SELF_TEST_MIN_DPS 150
#define LSM6DSO_G_SELF_TEST_MAX_DPS 700

#if CONFIG_LSM6DSO_BUS_SPI
extern const struct lsm6dso_bus_io lsm6dso_bus_io_spi;
#endif

#if CONFIG_LSM6DSO_BUS_I2C
extern const struct lsm6dso_bus_io lsm6dso_bus_io_i2c;
#endif

union lsm6dso_bus {
#if CONFIG_LSM6DSO_BUS_SPI
	struct spi_dt_spec spi;
#endif
#if CONFIG_LSM6DSO_BUS_I2C
	struct i2c_dt_spec i2c;
#endif
};

typedef int (*lsm6dso_bus_check_fn)(const union lsm6dso_bus *bus);
typedef int (*lsm6dso_bus_init_fn)(const union lsm6dso_bus *bus);
typedef int (*lsm6dso_reg_read_fn)(const union lsm6dso_bus *bus, uint8_t start, uint8_t *data,
				   uint16_t len);
typedef int (*lsm6dso_reg_write_fn)(const union lsm6dso_bus *bus, uint8_t start,
				    const uint8_t *data, uint16_t len);

struct lsm6dso_bus_io {
	lsm6dso_bus_check_fn check;
	lsm6dso_reg_read_fn read;
	lsm6dso_reg_write_fn write;
	lsm6dso_bus_init_fn init;
};

#ifdef __cplusplus
}
#endif

#endif /* INFUSE_SDK_DRIVERS_IMU_LSM6DSO_LSM6DSO_H_ */
