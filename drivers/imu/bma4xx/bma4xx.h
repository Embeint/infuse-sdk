/**
 * @file
 * @copyright 2024 Embeint Holdings Pty Ltd
 * @author Jordan Yates <jordan@embeint.com>
 *
 * SPDX-License-Identifier: FSL-1.1-ALv2
 */

#ifndef INFUSE_SDK_DRIVERS_IMU_BMA4XX_BMA4XX_H_
#define INFUSE_SDK_DRIVERS_IMU_BMA4XX_BMA4XX_H_

#include <stdint.h>

#include <zephyr/drivers/i2c.h>
#include <zephyr/drivers/spi.h>
#include <zephyr/sys/util.h>

#ifdef __cplusplus
extern "C" {
#endif

enum bma4xx_reg {
	BMA4XX_REG_CMD = 0x7E,
	BMA4XX_REG_SELF_TEST = 0x7D,
	BMA4XX_REG_IF_CONF = 0x7C,
	BMA4XX_REG_FIFO_PWR_CONFIG = 0x29,
	BMA4XX_REG_FIFO_CONFIG2 = 0x28,
	BMA4XX_REG_FIFO_CONFIG1 = 0x27,
	BMA4XX_REG_FIFO_CONFIG0 = 0x26,
	BMA4XX_REG_INT12_IO_CTRL = 0x24,
	BMA4XX_REG_INT12_MAP = 0x23,
	BMA4XX_REG_INT2_MAP = 0x22,
	BMA4XX_REG_INT1_MAP = 0x21,
	BMA4XX_REG_INT_CONFIG1 = 0x20,
	BMA4XX_REG_INT_CONFIG0 = 0x1F,
	BMA4XX_REG_ACC_CONFIG2 = 0x1B,
	BMA4XX_REG_ACC_CONFIG1 = 0x1A,
	BMA4XX_REG_ACC_CONFIG0 = 0x19,
	BMA4XX_REG_STEP_STAT = 0x18,
	BMA4XX_REG_STEP_CNT2 = 0x17,
	BMA4XX_REG_STEP_CNT1 = 0x16,
	BMA4XX_REG_STEP_CNT0 = 0x15,
	BMA4XX_REG_FIFO_DATA = 0x14,
	BMA4XX_REG_FIFO_LENGTH1 = 0x13,
	BMA4XX_REG_FIFO_LENGTH0 = 0x12,
	BMA4XX_REG_TEMP_DATA = 0x11,
	BMA4XX_REG_INT_STAT2 = 0x10,
	BMA4XX_REG_INT_STAT1 = 0x0F,
	BMA4XX_REG_INT_STAT0 = 0x0E,
	BMA4XX_REG_EVENT = 0x0D,
	BMA4XX_REG_SENSOR_TIME2 = 0x0C,
	BMA4XX_REG_SENSOR_TIME1 = 0x0B,
	BMA4XX_REG_SENSOR_TIME0 = 0x0A,
	BMA4XX_REG_ACC_Z_MSB = 0x09,
	BMA4XX_REG_ACC_Z_LSB = 0x08,
	BMA4XX_REG_ACC_Y_MSB = 0x07,
	BMA4XX_REG_ACC_Y_LSB = 0x06,
	BMA4XX_REG_ACC_X_MSB = 0x05,
	BMA4XX_REG_ACC_X_LSB = 0x04,
	BMA4XX_REG_STATUS = 0x03,
	BMA4XX_REG_ERR_REG = 0x02,
	BMA4XX_REG_CHIP_ID = 0x00,
	BMA4XX_REG_MASK = GENMASK(6, 0),
};

enum bma4xx_cmd {
	BMA4XX_CMD_NO_OP = 0x00,
	BMA4XX_CMD_FIFO_FLUSH = 0xB0,
	BMA4XX_CMD_STEP_CNT_CLEAR = 0xB1,
	BMA4XX_CMD_SOFT_RESET = 0xB6,
};

enum bma4xx_self_test {
	BMA4XX_SELF_TEST_NEGATIVE = BIT(3),
	BMA4XX_SELF_TEST_POSITIVE = 0x00,
	BMA4XX_SELF_TEST_EN_Z = BIT(2),
	BMA4XX_SELF_TEST_EN_Y = BIT(1),
	BMA4XX_SELF_TEST_EN_X = BIT(0),
	BMA4XX_SELF_TEST_EN_XYZ =
		BMA4XX_SELF_TEST_EN_X | BMA4XX_SELF_TEST_EN_Y | BMA4XX_SELF_TEST_EN_Z,
};

/* BMA400 datasheet section 4.8 */
#define BMA4XX_SELF_TEST_MINIMUM_X 1500
#define BMA4XX_SELF_TEST_MINIMUM_Y 1200
#define BMA4XX_SELF_TEST_MINIMUM_Z 250

enum bma4xx_acc_config0 {
	/* 0.2x ODR */
	BMA4XX_ACC_CONFIG0_FILT1_BW_LOW = BIT(7),
	/* 0.4x ODR */
	BMA4XX_ACC_CONFIG0_FILT1_BW_HIGH = 0x00,
	BMA4XX_ACC_CONFIG0_POWER_MODE_NORMAL = 0x02 << 0,
	BMA4XX_ACC_CONFIG0_POWER_MODE_LOW_POWER = 0x01 << 0,
	BMA4XX_ACC_CONFIG0_POWER_MODE_SLEEP = 0x00 << 0,
};

enum bma4xx_acc_config1 {
	BMA4XX_ACC_CONFIG1_RANGE_16G = (0x03 << 6),
	BMA4XX_ACC_CONFIG1_RANGE_8G = (0x02 << 6),
	BMA4XX_ACC_CONFIG1_RANGE_4G = (0x01 << 6),
	BMA4XX_ACC_CONFIG1_RANGE_2G = (0x00 << 6),
	/* Oversampling rate 3: highest accuracy */
	BMA4XX_ACC_CONFIG1_OSR_3 = (0x03 << 4),
	BMA4XX_ACC_CONFIG1_OSR_2 = (0x02 << 4),
	BMA4XX_ACC_CONFIG1_OSR_1 = (0x01 << 4),
	/* Oversampling rate 0: lowest power */
	BMA4XX_ACC_CONFIG1_OSR_0 = (0x00 << 4),
	BMA4XX_ACC_CONFIG1_ODR_800 = 0x0B,
	BMA4XX_ACC_CONFIG1_ODR_400 = 0x0A,
	BMA4XX_ACC_CONFIG1_ODR_200 = 0x09,
	BMA4XX_ACC_CONFIG1_ODR_100 = 0x08,
	BMA4XX_ACC_CONFIG1_ODR_50 = 0x07,
	BMA4XX_ACC_CONFIG1_ODR_25 = 0x06,
	BMA4XX_ACC_CONFIG1_ODR_25D2 = 0x05,
};

enum bma4xx_int_config0 {
	BMA4XX_INT_CONFIG0_ORIENTATION_CHANGED = BIT(1),
	BMA4XX_INT_CONFIG0_GENERIC_INT_1 = BIT(2),
	BMA4XX_INT_CONFIG0_GENERIC_INT_2 = BIT(3),
	BMA4XX_INT_CONFIG0_FIFO_FULL = BIT(5),
	BMA4XX_INT_CONFIG0_FIFO_WATERMARK = BIT(6),
	BMA4XX_INT_CONFIG0_DATA_READY = BIT(7),
};

enum bma4xx_int_config1 {
	BMA4XX_INT_CONFIG1_STEP_DETECTED = BIT(0),
	BMA4XX_INT_CONFIG1_SINGLE_TAP = BIT(2),
	BMA4XX_INT_CONFIG1_DOUBLE_TAP = BIT(3),
	BMA4XX_INT_CONFIG1_ACTIVITY_CHANGED = BIT(4),
	BMA4XX_INT_CONFIG1_LATCHED_INT = BIT(7),
};

enum bma4xx_int_map {
	BMA4XX_INT_MAP_WAKEUP = BIT(0),
	BMA4XX_INT_MAP_ORIENTATION_CHANGED = BIT(1),
	BMA4XX_INT_MAP_GENERIC_INT_1 = BIT(2),
	BMA4XX_INT_MAP_GENERIC_INT_2 = BIT(3),
	BMA4XX_INT_MAP_INTERRUPT_OVERRUN = BIT(4),
	BMA4XX_INT_MAP_FIFO_FULL = BIT(5),
	BMA4XX_INT_MAP_FIFO_WATERMARK = BIT(6),
	BMA4XX_INT_MAP_DATA_READY = BIT(7),
};

enum bma4xx_int_io_ctrl {
	BMA4XX_INT_IO_CTRL_INT1_ACTIVE_LOW = 0x00,
	BMA4XX_INT_IO_CTRL_INT1_ACTIVE_HIGH = BIT(1),
	BMA4XX_INT_IO_CTRL_INT1_PUSH_PULL = 0x00,
	BMA4XX_INT_IO_CTRL_INT1_OPEN_DRAIN = BIT(2),
	BMA4XX_INT_IO_CTRL_INT2_ACTIVE_LOW = 0x00,
	BMA4XX_INT_IO_CTRL_INT2_ACTIVE_HIGH = BIT(5),
	BMA4XX_INT_IO_CTRL_INT2_PUSH_PULL = 0x00,
	BMA4XX_INT_IO_CTRL_INT2_OPEN_DRAIN = BIT(6),
};

enum bma4xx_fifo_config0 {
	BMA4XX_FIFO_CONFIG0_AUTO_FLUSH = BIT(0),
	BMA4XX_FIFO_CONFIG0_STOP_ON_FULL = BIT(1),
	BMA4XX_FIFO_CONFIG0_SENSORTIME_EN = BIT(2),
	BMA4XX_FIFO_CONFIG0_DATA_12BIT = 0x00,
	BMA4XX_FIFO_CONFIG0_DATA_8BIT = BIT(4),
	BMA4XX_FIFO_CONFIG0_EN_X = BIT(5),
	BMA4XX_FIFO_CONFIG0_EN_Y = BIT(6),
	BMA4XX_FIFO_CONFIG0_EN_Z = BIT(7),
	BMA4XX_FIFO_CONFIG0_EN_XYZ = BIT(5) | BIT(6) | BIT(7),
};

enum bma4xx_chip_id {
	BMA4XX_CHIP_ID = 0x90,
};

enum fifo_header {
	FIFO_HEADER_SENSORTIME = BIT(5),
	FIFO_HEADER_PARAM_MASK = GENMASK(5, 1),
	FIFO_HEADER_MODE_CONTROL = BIT(6),
	FIFO_HEADER_MODE_REGULAR = BIT(7),
	FIFO_HEADER_MODE_MASK = GENMASK(7, 6),
};

#define BMA4XX_FIFO_LEN  1024
#define BMA4XX_POR_DELAY 5000

#if CONFIG_BMA4XX_BUS_SPI
extern const struct bma4xx_bus_io bma4xx_bus_io_spi;
#endif

#if CONFIG_BMA4XX_BUS_I2C
extern const struct bma4xx_bus_io bma4xx_bus_io_i2c;
#endif

union bma4xx_bus {
#if CONFIG_BMA4XX_BUS_SPI
	struct spi_dt_spec spi;
#endif
#if CONFIG_BMA4XX_BUS_I2C
	struct i2c_dt_spec i2c;
#endif
};

typedef int (*bma4xx_bus_check_fn)(const union bma4xx_bus *bus);
typedef int (*bma4xx_bus_init_fn)(const union bma4xx_bus *bus);
typedef int (*bma4xx_bus_pm_fn)(const union bma4xx_bus *bus, bool power_up);
typedef int (*bma4xx_reg_read_fn)(const union bma4xx_bus *bus, uint8_t addr, uint8_t *data,
				  uint16_t len);
typedef int (*bma4xx_reg_write_fn)(const union bma4xx_bus *bus, uint8_t addr, uint8_t data);

struct bma4xx_bus_io {
	bma4xx_bus_check_fn check;
	bma4xx_bus_pm_fn pm;
	bma4xx_reg_read_fn read;
	bma4xx_reg_write_fn write;
	bma4xx_bus_init_fn init;
};

#ifdef __cplusplus
}
#endif

#endif /* INFUSE_SDK_DRIVERS_IMU_BMA4XX_BMA4XX_H_ */
