/**
 * @file
 * @copyright 2024 Embeint Holdings Pty Ltd
 * @author Jordan Yates <jordan@embeint.com>
 *
 * SPDX-License-Identifier: FSL-1.1-ALv2
 */

#ifndef INFUSE_SDK_DRIVERS_IMU_LSM6DSV_LSM6DSV_H_
#define INFUSE_SDK_DRIVERS_IMU_LSM6DSV_LSM6DSV_H_

#include <stdint.h>

#include <zephyr/drivers/i2c.h>
#include <zephyr/drivers/spi.h>

#ifdef __cplusplus
extern "C" {
#endif

enum {
	LSM6DSV_REG_FUNC_CFG_ACCESS = 0x01,
	LSM6DSV_REG_PIN_CTRL = 0x02,
	LSM6DSV_REG_IF_CFG = 0x03,
	LSM6DSV_REG_ODR_TRIG_CFG = 0x06,
	LSM6DSV_REG_FIFO_CTRL1 = 0x07,
	LSM6DSV_REG_FIFO_CTRL2 = 0x08,
	LSM6DSV_REG_FIFO_CTRL3 = 0x09,
	LSM6DSV_REG_FIFO_CTRL4 = 0x0A,
	LSM6DSV_REG_COUNTER_BDR_REG1 = 0x0B,
	LSM6DSV_REG_COUNTER_BDR_REG2 = 0x0C,
	LSM6DSV_REG_INT1_CTRL = 0x0D,
	LSM6DSV_REG_INT2_CTRL = 0x0E,
	LSM6DSV_REG_WHO_AM_I = 0x0F,
	LSM6DSV_REG_CTRL1 = 0x10,
	LSM6DSV_REG_CTRL2 = 0x11,
	LSM6DSV_REG_CTRL3 = 0x12,
	LSM6DSV_REG_CTRL4 = 0x13,
	LSM6DSV_REG_CTRL5 = 0x14,
	LSM6DSV_REG_CTRL6 = 0x15,
	LSM6DSV_REG_CTRL7 = 0x16,
	LSM6DSV_REG_CTRL8 = 0x17,
	LSM6DSV_REG_CTRL9 = 0x18,
	LSM6DSV_REG_CTRL10 = 0x19,
	LSM6DSV_REG_CTRL_STATUS = 0x1A,
	LSM6DSV_REG_FIFO_STATUS1 = 0x1B,
	LSM6DSV_REG_FIFO_STATUS2 = 0x1C,
	LSM6DSV_REG_ALL_INT_SRC = 0x1D,
	LSM6DSV_REG_STATUS_REG = 0x1E,
	LSM6DSV_REG_OUT_TEMP_L = 0x20,
	LSM6DSV_REG_OUT_TEMP_H = 0x21,
	LSM6DSV_REG_OUTX_L_G = 0x22,
	LSM6DSV_REG_OUTX_H_G = 0x23,
	LSM6DSV_REG_OUTY_L_G = 0x24,
	LSM6DSV_REG_OUTY_H_G = 0x25,
	LSM6DSV_REG_OUTZ_L_G = 0x26,
	LSM6DSV_REG_OUTZ_H_G = 0x27,
	LSM6DSV_REG_OUTX_L_A = 0x28,
	LSM6DSV_REG_OUTX_H_A = 0x29,
	LSM6DSV_REG_OUTY_L_A = 0x2A,
	LSM6DSV_REG_OUTY_H_A = 0x2B,
	LSM6DSV_REG_OUTZ_L_A = 0x2C,
	LSM6DSV_REG_OUTZ_H_A = 0x2D,
	LSM6DSV_REG_UI_OUTX_L_G_OIS_EIS = 0x2E,
	LSM6DSV_REG_UI_OUTX_H_G_OIS_EIS = 0x2F,
	LSM6DSV_REG_UI_OUTY_L_G_OIS_EIS = 0x30,
	LSM6DSV_REG_UI_OUTY_H_G_OIS_EIS = 0x31,
	LSM6DSV_REG_UI_OUTZ_L_G_OIS_EIS = 0x32,
	LSM6DSV_REG_UI_OUTZ_H_G_OIS_EIS = 0x33,
	LSM6DSV_REG_UI_OUTX_L_A_OIS_DUALC = 0x34,
	LSM6DSV_REG_UI_OUTX_H_A_OIS_DUALC = 0x35,
	LSM6DSV_REG_UI_OUTY_L_A_OIS_DUALC = 0x36,
	LSM6DSV_REG_UI_OUTY_H_A_OIS_DUALC = 0x37,
	LSM6DSV_REG_UI_OUTZ_L_A_OIS_DUALC = 0x38,
	LSM6DSV_REG_UI_OUTZ_H_A_OIS_DUALC = 0x39,
	LSM6DSV_REG_TIMESTAMP0 = 0x40,
	LSM6DSV_REG_TIMESTAMP1 = 0x41,
	LSM6DSV_REG_TIMESTAMP2 = 0x42,
	LSM6DSV_REG_TIMESTAMP3 = 0x43,
	LSM6DSV_REG_UI_STATUS_REG_OIS = 0x44,
	LSM6DSV_REG_X_OFS_USR = 0x73,
	LSM6DSV_REG_Y_OFS_USR = 0x74,
	LSM6DSV_REG_Z_OFS_USR = 0x75,
	LSM6DSV_REG_FIFO_DATA_OUT_TAG = 0x78,
	LSM6DSV_REG_FIFO_DATA_OUT_X_L = 0x79,
	LSM6DSV_REG_FIFO_DATA_OUT_X_H = 0x7A,
	LSM6DSV_REG_FIFO_DATA_OUT_Y_L = 0x7B,
	LSM6DSV_REG_FIFO_DATA_OUT_Y_H = 0x7C,
	LSM6DSV_REG_FIFO_DATA_OUT_Z_L = 0x7D,
	LSM6DSV_REG_FIFO_DATA_OUT_Z_H = 0x7E,
};

enum lsm6dsv_func_cfg_access {
	LSM6DSV_FUNC_CFG_ACCESS_EMB_FUNC_REG_ACCESS = BIT(7),
	LSM6DSV_FUNC_CFG_ACCESS_SHUB_REG_ACCESS = BIT(6),
	LSM6DSV_FUNC_CFG_ACCESS_FSM_WR_CTRL_EN = BIT(3),
	LSM6DSV_FUNC_CFG_ACCESS_SW_POR = BIT(2),
	LSM6DSV_FUNC_CFG_ACCESS_SPI2_RESET = BIT(1),
	LSM6DSV_FUNC_CFG_ACCESS_OIS_CTRL_FROM_UI = BIT(0),
};

enum lsm6dsv_fifo_ctrl4 {
	LSM6DSV_FIFO_CTRL4_DEC_TS_DISABLED = (0 << 6),
	LSM6DSV_FIFO_CTRL4_DEC_TS_1 = (1 << 6),
	LSM6DSV_FIFO_CTRL4_DEC_TS_8 = (2 << 6),
	LSM6DSV_FIFO_CTRL4_DEC_TS_32 = (3 << 6),
	LSM6DSV_FIFO_CTRL4_ODR_T_BATCH_DISABLED = (0 << 4),
	LSM6DSV_FIFO_CTRL4_ODR_T_BATCH_2HZ = (1 << 4),
	LSM6DSV_FIFO_CTRL4_ODR_T_BATCH_15HZ = (2 << 4),
	LSM6DSV_FIFO_CTRL4_ODR_T_BATCH_60HZ = (3 << 4),
	LSM6DSV_FIFO_CTRL4_G_EIS_FIFO_EN = BIT(3),
	LSM6DSV_FIFO_CTRL4_MODE_DISABLED = 0,
	LSM6DSV_FIFO_CTRL4_MODE_FIFO = 1,
	LSM6DSV_FIFO_CTRL4_MODE_CONT_WTM_TO_FULL = 2,
	LSM6DSV_FIFO_CTRL4_MODE_CONT_TO_FIFO = 3,
	LSM6DSV_FIFO_CTRL4_MODE_BYP_TO_CONT = 4,
	LSM6DSV_FIFO_CTRL4_MODE_CONT = 6,
	LSM6DSV_FIFO_CTRL4_MODE_BYP_TO_FIFO = 7,
};

enum lsm6dsv_int1_ctrl {
	LSM6DSV_INT1_CTRL_DRDY_ACC = BIT(0),
	LSM6DSV_INT1_CTRL_DRDY_GYR = BIT(1),
	LSM6DSV_INT1_CTRL_FIFO_THR = BIT(3),
	LSM6DSV_INT1_CTRL_FIFO_OVR = BIT(4),
	LSM6DSV_INT1_CTRL_FIFO_FULL = BIT(5),
	LSM6DSV_INT1_CTRL_CNT_BDR = BIT(6),
};

enum lsm6dsv_ctrl1 {
	LSM6DSV_CTRL1_ACC_OP_MODE_HIGH_PERF = (0 << 4),
	LSM6DSV_CTRL1_ACC_OP_MODE_HIGH_ACC_ODR = (1 << 4),
	LSM6DSV_CTRL1_ACC_OP_MODE_ODR_TRIGGERED = (3 << 4),
	LSM6DSV_CTRL1_ACC_OP_MODE_LOW_POWER_1 = (4 << 4),
	LSM6DSV_CTRL1_ACC_OP_MODE_LOW_POWER_2 = (5 << 4),
	LSM6DSV_CTRL1_ACC_OP_MODE_LOW_POWER_3 = (6 << 4),
	LSM6DSV_CTRL1_ACC_OP_MODE_NORMAL = (7 << 4),
	LSM6DSV_CTRL1_ACC_ODR_POWER_DOWN = 0,
	LSM6DSV_CTRL1_ACC_ODR_1HZ8 = 1,
	LSM6DSV_CTRL1_ACC_ODR_7HZ5 = 2,
	LSM6DSV_CTRL1_ACC_ODR_15HZ = 3,
	LSM6DSV_CTRL1_ACC_ODR_30HZ = 4,
	LSM6DSV_CTRL1_ACC_ODR_60HZ = 5,
	LSM6DSV_CTRL1_ACC_ODR_120HZ = 6,
	LSM6DSV_CTRL1_ACC_ODR_240HZ = 7,
	LSM6DSV_CTRL1_ACC_ODR_480HZ = 8,
	LSM6DSV_CTRL1_ACC_ODR_960HZ = 9,
	LSM6DSV_CTRL1_ACC_ODR_1920HZ = 10,
	LSM6DSV_CTRL1_ACC_ODR_3840HZ = 11,
	LSM6DSV_CTRL1_ACC_ODR_7680HZ = 12,
};

enum lsm6dsv_ctrl2 {
	LSM6DSV_CTRL2_GYR_OP_MODE_HIGH_PERF = (0 << 4),
	LSM6DSV_CTRL2_GYR_OP_MODE_HIGH_ACC_ODR = (1 << 4),
	LSM6DSV_CTRL2_GYR_OP_MODE_ODR_TRIGGERED = (3 << 4),
	LSM6DSV_CTRL2_GYR_OP_MODE_SLEEP = (4 << 4),
	LSM6DSV_CTRL2_GYR_OP_MODE_LOW_POWER = (5 << 4),
	LSM6DSV_CTRL2_GYR_ODR_POWER_DOWN = 0,
	LSM6DSV_CTRL2_GYR_ODR_7HZ5 = 2,
	LSM6DSV_CTRL2_GYR_ODR_15HZ = 3,
	LSM6DSV_CTRL2_GYR_ODR_30HZ = 4,
	LSM6DSV_CTRL2_GYR_ODR_60HZ = 5,
	LSM6DSV_CTRL2_GYR_ODR_120HZ = 6,
	LSM6DSV_CTRL2_GYR_ODR_240HZ = 7,
	LSM6DSV_CTRL2_GYR_ODR_480HZ = 8,
	LSM6DSV_CTRL2_GYR_ODR_960HZ = 9,
	LSM6DSV_CTRL2_GYR_ODR_1920HZ = 10,
	LSM6DSV_CTRL2_GYR_ODR_3840HZ = 11,
	LSM6DSV_CTRL2_GYR_ODR_7680HZ = 12,
};

enum lsm6dsv_ctrl4 {
	LSM6DSV_CTRL4_INT2_IN_LH = BIT(0),
	LSM6DSV_CTRL4_DRDY_PULSED = BIT(1),
	LSM6DSV_CTRL4_INT2_DRDY_TEMP = BIT(2),
	LSM6DSV_CTRL4_INT2_DRDY_MASK = BIT(3),
	LSM6DSV_CTRL4_INT2_ON_INT1 = BIT(4),
};

enum lsm6dsv_ctrl6 {
	LSM6DSV_CTRL6_GYR_RANGE_125DPS = 0,
	LSM6DSV_CTRL6_GYR_RANGE_250DPS = 1,
	LSM6DSV_CTRL6_GYR_RANGE_500DPS = 2,
	LSM6DSV_CTRL6_GYR_RANGE_1000DPS = 3,
	LSM6DSV_CTRL6_GYR_RANGE_2000DPS = 4,
	LSM6DSV_CTRL6_GYR_RANGE_4000DPS = 12,
};

enum lsm6dsv_ctrl8 {
	LSM6DSV_CTRL8_ACC_FILTER_BW_ODR_4 = (0 << 5),
	LSM6DSV_CTRL8_ACC_FILTER_BW_ODR_10 = (1 << 5),
	LSM6DSV_CTRL8_ACC_FILTER_BW_ODR_20 = (2 << 5),
	LSM6DSV_CTRL8_ACC_FILTER_BW_ODR_45 = (3 << 5),
	LSM6DSV_CTRL8_ACC_FILTER_BW_ODR_100 = (4 << 5),
	LSM6DSV_CTRL8_ACC_FILTER_BW_ODR_200 = (5 << 5),
	LSM6DSV_CTRL8_ACC_FILTER_BW_ODR_400 = (6 << 5),
	LSM6DSV_CTRL8_ACC_FILTER_BW_ODR_800 = (7 << 5),
	LSM6DSV_CTRL8_ACC_RANGE_2G = 0,
	LSM6DSV_CTRL8_ACC_RANGE_4G = 1,
	LSM6DSV_CTRL8_ACC_RANGE_8G = 2,
	LSM6DSV_CTRL8_ACC_RANGE_16G = 3,
};

enum lsm6dsv_fifo_tag {
	LSM6DSV_FIFO_TAG_SENSOR_MASK = (0x1F << 3),
	LSM6DSV_FIFO_TAG_SENSOR_EMPTY = (0 << 3),
	LSM6DSV_FIFO_TAG_SENSOR_GYROSCOPE_NC = (1 << 3),
	LSM6DSV_FIFO_TAG_SENSOR_ACCELEROMETER_NC = (2 << 3),
	LSM6DSV_FIFO_TAG_SENSOR_TEMPERATURE = (3 << 3),
	LSM6DSV_FIFO_TAG_SENSOR_TIMESTAMP = (4 << 3),
	LSM6DSV_FIFO_TAG_SENSOR_CFG_CHANGE = (5 << 3),
};

#define LSM6DSV_WHO_AM_I  0x70
#define LSM6DSV_POR_DELAY 30
#define LSM6DSV_FIFO_SIZE 1536

#if CONFIG_LSM6DSV_BUS_SPI
extern const struct lsm6dsv_bus_io lsm6dsv_bus_io_spi;
#endif

#if CONFIG_LSM6DSV_BUS_I2C
extern const struct lsm6dsv_bus_io lsm6dsv_bus_io_i2c;
#endif

union lsm6dsv_bus {
#if CONFIG_LSM6DSV_BUS_SPI
	struct spi_dt_spec spi;
#endif
#if CONFIG_LSM6DSV_BUS_I2C
	struct i2c_dt_spec i2c;
#endif
};

typedef int (*lsm6dsv_bus_check_fn)(const union lsm6dsv_bus *bus);
typedef int (*lsm6dsv_bus_init_fn)(const union lsm6dsv_bus *bus);
typedef int (*lsm6dsv_reg_read_fn)(const union lsm6dsv_bus *bus, uint8_t start, uint8_t *data,
				   uint16_t len);
typedef int (*lsm6dsv_reg_write_fn)(const union lsm6dsv_bus *bus, uint8_t start,
				    const uint8_t *data, uint16_t len);

struct lsm6dsv_bus_io {
	lsm6dsv_bus_check_fn check;
	lsm6dsv_reg_read_fn read;
	lsm6dsv_reg_write_fn write;
	lsm6dsv_bus_init_fn init;
};

#ifdef __cplusplus
}
#endif

#endif /* INFUSE_SDK_DRIVERS_IMU_LSM6DSV_LSM6DSV_H_ */
