/**
 * @file
 * @brief Autogenerated RPC definitions
 * @copyright 2024 Embeint Holdings Pty Ltd
 * @author scripts/west_commands/cloudgen.py
 *
 * INFUSE-IOT-AUTOGENERATED
 *
 * SPDX-License-Identifier: FSL-1.1-ALv2
 */

#ifndef INFUSE_SDK_INCLUDE_GENERATED_RPC_TYPES_H_
#define INFUSE_SDK_INCLUDE_GENERATED_RPC_TYPES_H_

#include <stdint.h>

#include <zephyr/toolchain.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief RPC packet headers
 * @defgroup rpc_packet_headers RPC packet headers
 * @{
 */

/**
 * @brief Header for @ref INFUSE_RPC_CMD packet
 */
struct infuse_rpc_req_header {
	/** Unique request ID */
	uint32_t request_id;
	/** Command to run */
	uint16_t command_id;
} __packed;

/**
 * @brief Secondary header for RPCs expecting @ref INFUSE_RPC_DATA
 */
struct infuse_rpc_req_data_header {
	/** Amount of data expected to be transferred */
	uint32_t size;
	/** Send an @ref INFUSE_RPC_DATA_ACK response every N packets received */
	uint8_t rx_ack_period;
} __packed;

/**
 * @brief @ref INFUSE_RPC_DATA payload
 */
struct infuse_rpc_data {
	/** Request ID matching original @ref infuse_rpc_req_header */
	uint32_t request_id;
	/** Byte offset of data in this payload */
	uint32_t offset;
	/** Data payload */
	uint8_t payload[];
} __packed;

/**
 * @brief @ref INFUSE_RPC_DATA_ACK packet
 */
struct infuse_rpc_data_ack {
	/** Request ID matching original @ref infuse_rpc_req_header */
	uint32_t request_id;
	/** Byte offsets received */
	uint32_t offsets[];
} __packed;

/**
 * @brief Header for @ref INFUSE_RPC_RSP packet
 */
struct infuse_rpc_rsp_header {
	/** Request ID matching original @ref infuse_rpc_req_header */
	uint32_t request_id;
	/** Command that was run */
	uint16_t command_id;
	/** Result of the RPC */
	int16_t return_code;
} __packed;

/**
 * @}
 */

/* clang-format off */

/**
 * @brief Common RPC struct fields
 * @defgroup rpc_struct_definitions Common RPC struct fields
 * @{
 */

/** MCUboot semantic versioning struct */
struct rpc_struct_mcuboot_img_sem_ver {
	uint8_t major;
	uint8_t minor;
	uint16_t revision;
	uint32_t build_num;
} __packed;

/** KV store data value */
struct rpc_struct_kv_store_value {
	uint16_t id;
	int16_t len;
	uint8_t data[];
} __packed;

/** KV store data CRC */
struct rpc_struct_kv_store_crc {
	uint16_t id;
	uint32_t crc;
} __packed;

/** Bluetooth LE address */
struct rpc_struct_bt_addr_le {
	uint8_t type;
	uint8_t val[6];
} __packed;

/** IPv4 address */
struct rpc_struct_ipv4_address {
	uint8_t addr[4];
} __packed;

/** IPv6 address */
struct rpc_struct_ipv6_address {
	uint8_t addr[16];
} __packed;

/** Common network state */
struct rpc_struct_network_state {
	/** Operational state */
	uint8_t state;
	/** Interface flags */
	uint32_t if_flags;
	/** L2 flags */
	uint16_t l2_flags;
	/** Maximum transmission unit */
	uint16_t mtu;
	/** Self IPv4 address */
	struct rpc_struct_ipv4_address ipv4;
	/** Self IPv6 address */
	struct rpc_struct_ipv6_address ipv6;
} __packed;

/** WiFi interface status */
struct rpc_struct_wifi_state {
	/** Operational state */
	uint8_t state;
	/** Service Set Identifier (Network Name) */
	char ssid[32];
	/** Basic Service Set Identifier (MAC address) */
	uint8_t bssid[6];
	/** Frequency band */
	uint8_t band;
	/** Channel index */
	uint8_t channel;
	/** https://w1.fi/wpa_supplicant/devel/defs_8h.html#a4aeb27c1e4abd046df3064ea9756f0bc */
	uint8_t iface_mode;
	/** WiFi link operating mode (https://en.wikipedia.org/wiki/Wi-Fi#Versions_and_generations) */
	uint8_t link_mode;
	/** IEEE 802.11 security type */
	uint8_t security;
	/** Received signal strength (dBm) */
	int8_t rssi;
	/** Beacon interval (ms) */
	uint16_t beacon_interval;
	/** Target Wake Time capable? */
	uint8_t twt_capable;
} __packed;

/** LTE interface status */
struct rpc_struct_lte_state {
	/** Network registration state (3GPP TS 127.007) */
	uint8_t registration_state;
	/** Access Technology (3GPP TS 127.007) */
	uint8_t access_technology;
	/** Mobile Country Code */
	uint16_t mcc;
	/** Mobile Network Code */
	uint16_t mnc;
	/** E-UTRAN cell ID */
	uint32_t cell_id;
	/** Tracking area code */
	uint32_t tac;
	/** Tracking area update period */
	int32_t tau;
	/** Tracking area code (3GPP TS 36.101) */
	uint16_t earfcn;
	/** LTE Band (3GPP 36.101) */
	uint8_t band;
	/** Seconds between RRC idle and PSM */
	int16_t psm_active_time;
	/** Period between eDRX paging windows */
	float edrx_interval;
	/** Duration of eDRX paging window */
	float edrx_paging_window;
	/** Reference signal received power (dBm) */
	int16_t rsrp;
	/** Reference signal received quality (dB) */
	int8_t rsrq;
} __packed;

/** WiFi interface status */
struct rpc_struct_wifi_scan_result {
	/** Frequency band */
	uint8_t band;
	/** Channel index */
	uint8_t channel;
	/** IEEE 802.11 security type */
	uint8_t security;
	/** Received signal strength (dBm) */
	int8_t rssi;
	/** Basic Service Set Identifier (MAC address) */
	uint8_t bssid[6];
	/** SSID length */
	uint8_t ssid_len;
	/** Service Set Identifier (Network Name) */
	char ssid[];
} __packed;

/** Signed 16 bit XYZ vector */
struct rpc_struct_xyz_s16 {
	/** X axis */
	int16_t x;
	/** Y axis */
	int16_t y;
	/** Z axis */
	int16_t z;
} __packed;

/** Single Infuse-IoT application state */
struct rpc_struct_infuse_state {
	/** State */
	uint8_t state;
	/** Duration state is set for */
	uint16_t timeout;
} __packed;

/** `struct sockaddr_in` or `struct sockaddr_in6` compatible address */
struct rpc_struct_sockaddr {
	/** AF_INET / AF_INET6 */
	uint8_t sin_family;
	/** Port number (Network byte order) */
	uint16_t sin_port;
	/** IPv4/IPv6 address */
	uint8_t sin_addr[16];
	/** Interfaces for a scope (IPv6 only) */
	uint8_t scope_id;
} __packed;

/** struct k_heap information */
struct rpc_struct_heap_info {
	/** Address of the heap structure */
	uint32_t addr;
	/** Number of bytes currently free */
	uint32_t free_bytes;
	/** Number of bytes currently allocated */
	uint32_t allocated_bytes;
	/** Maximum number of bytes ever concurrently allocated */
	uint32_t max_allocated_bytes;
} __packed;

/** Bluetooth LE address type */
enum rpc_enum_bt_le_addr_type {
	/** Public address */
	RPC_ENUM_BT_LE_ADDR_TYPE_PUBLIC = 0,
	/** Static random address */
	RPC_ENUM_BT_LE_ADDR_TYPE_RANDOM = 1,
};

/** Actions to take upon receiving a file */
enum rpc_enum_file_action {
	/** Discard received file (Useful for testing) */
	RPC_ENUM_FILE_ACTION_DISCARD = 0,
	/** Complete application image for firmware upgrade */
	RPC_ENUM_FILE_ACTION_APP_IMG = 1,
	/** Complete Bluetooth controller image for firmware upgrade */
	RPC_ENUM_FILE_ACTION_BT_CTLR_IMG = 2,
	/** CPatch application image upgrade (binary diff) */
	RPC_ENUM_FILE_ACTION_APP_CPATCH = 11,
	/** CPatch Bluetooth controller image upgrade (binary diff) */
	RPC_ENUM_FILE_ACTION_BT_CTLR_CPATCH = 12,
	/** nRF91 LTE modem firmware upgrade diff */
	RPC_ENUM_FILE_ACTION_NRF91_MODEM_DIFF = 20,
	/** File to copy to another device */
	RPC_ENUM_FILE_ACTION_FILE_FOR_COPY = 30,
};

/** Infuse-IoT Bluetooth characteristics (Bitmask) */
enum rpc_enum_infuse_bt_characteristic {
	/** Command characteristic */
	RPC_ENUM_INFUSE_BT_CHARACTERISTIC_COMMAND = 1,
	/** Data characteristic */
	RPC_ENUM_INFUSE_BT_CHARACTERISTIC_DATA = 2,
	/** Serial log characteristic */
	RPC_ENUM_INFUSE_BT_CHARACTERISTIC_LOGGING = 4,
};

/** Data Logger identifier */
enum rpc_enum_data_logger {
	/** Onboard flash logger */
	RPC_ENUM_DATA_LOGGER_FLASH_ONBOARD = 1,
	/** Removable flash logger (SD) */
	RPC_ENUM_DATA_LOGGER_FLASH_REMOVABLE = 2,
	/** Networked UDP logger */
	RPC_ENUM_DATA_LOGGER_UDP = 3,
};

/** Source for zperf data upload */
enum rpc_enum_zperf_data_source {
	/** Constant payload ('i') */
	RPC_ENUM_ZPERF_DATA_SOURCE_CONSTANT = 0,
	/** Random payload contents */
	RPC_ENUM_ZPERF_DATA_SOURCE_RANDOM = 1,
	/** Read data from onboard flash logger */
	RPC_ENUM_ZPERF_DATA_SOURCE_FLASH_ONBOARD = 2,
	/** Read data from removable flash logger (SD) */
	RPC_ENUM_ZPERF_DATA_SOURCE_FLASH_REMOVABLE = 3,
	/** Flag (0x80) to specify payload should be encrypted */
	RPC_ENUM_ZPERF_DATA_SOURCE_ENCRYPT = 128,
};

/**
 * @}
 */

/**
 * @brief Built-in RPC definitions
 * @defgroup builtin_rpc_definitions Built-in RPC definitions
 * @{
 */

/** Infuse-IoT builtin RPC commands */
enum rpc_builtin_id {
	/** Reboot the device after a delay */
	RPC_ID_REBOOT = 1,
	/** Immediately trigger an exception on the device */
	RPC_ID_FAULT = 2,
	/** Get the current time knowledge of the device */
	RPC_ID_TIME_GET = 3,
	/** Set the current time of the device */
	RPC_ID_TIME_SET = 4,
	/** Write values to the KV store */
	RPC_ID_KV_WRITE = 5,
	/** Read values from the KV store */
	RPC_ID_KV_READ = 6,
	/** Read KV store CRC's */
	RPC_ID_KV_REFLECT_CRCS = 7,
	/** Query current state of zbus channel */
	RPC_ID_ZBUS_CHANNEL_STATE = 8,
	/** Query basic application versions and state */
	RPC_ID_APPLICATION_INFO = 9,
	/** Scan for WiFi networks */
	RPC_ID_WIFI_SCAN = 10,
	/** Get current WiFi interface state */
	RPC_ID_WIFI_STATE = 11,
	/** Retrieve information pertaining to the previous reboot */
	RPC_ID_LAST_REBOOT = 12,
	/** Get state of a data logger */
	RPC_ID_DATA_LOGGER_STATE = 13,
	/** Read data from data logger */
	RPC_ID_DATA_LOGGER_READ = 14,
	/** Read arbitrary memory (NO ADDRESS VALIDATION PERFORMED) */
	RPC_ID_MEM_READ = 15,
	/** Read current Infuse-IoT application states */
	RPC_ID_INFUSE_STATES_QUERY = 16,
	/** Update Infuse-IoT application states */
	RPC_ID_INFUSE_STATES_UPDATE = 17,
	/** Erase all data from a data logger */
	RPC_ID_DATA_LOGGER_ERASE = 18,
	/** Query stats of heaps */
	RPC_ID_HEAP_STATS = 19,
	/** Run AT command against LTE modem */
	RPC_ID_LTE_AT_CMD = 20,
	/** Get current LTE interface state */
	RPC_ID_LTE_STATE = 21,
	/** Read data from data logger, with auto-updating start_block */
	RPC_ID_DATA_LOGGER_READ_AVAILABLE = 22,
	/** Download a file from a COAP server (Infuse-IoT DTLS protected) */
	RPC_ID_COAP_DOWNLOAD = 30,
	/** Network upload bandwidth testing using zperf/iperf */
	RPC_ID_ZPERF_UPLOAD = 31,
	/** Write a file to the device */
	RPC_ID_FILE_WRITE_BASIC = 40,
	/** Write an annotation to the device */
	RPC_ID_ANNOTATE = 41,
	/** Connect to an Infuse-IoT Bluetooth device */
	RPC_ID_BT_CONNECT_INFUSE = 50,
	/** Disconnect from a Bluetooth device */
	RPC_ID_BT_DISCONNECT = 51,
	/** Copy a local file to a remote device over Bluetooth */
	RPC_ID_BT_FILE_COPY_BASIC = 52,
	/** Copy a file fetched from COAP to a remote device over Bluetooth */
	RPC_ID_BT_FILE_COPY_COAP = 53,
	/** Connect to a Bluetooth device and run the MCUMGR reboot command */
	RPC_ID_BT_MCUMGR_REBOOT = 54,
	/** Store the current accelerometer vector as the gravity reference */
	RPC_ID_GRAVITY_REFERENCE_UPDATE = 60,
	/** Query current security state and validate identity */
	RPC_ID_SECURITY_STATE = 30000,
	/** Send multiple INFUSE_RPC_DATA packets */
	RPC_ID_DATA_SENDER = 32765,
	/** Receive multiple INFUSE_RPC_DATA packets */
	RPC_ID_DATA_RECEIVER = 32766,
	/** Echo any input data in the response */
	RPC_ID_ECHO = 32767,
	/** End of builtin RPC range */
	RPC_BUILTIN_END = 32768,
};

/** Reboot the device after a delay */
struct rpc_reboot_request {
	struct infuse_rpc_req_header header;
	/** Requested delay (0 == default) */
	uint32_t delay_ms;
} __packed;

struct rpc_reboot_response {
	struct infuse_rpc_rsp_header header;
	/** Duration until reboot */
	uint32_t delay_ms;
} __packed;

/** Immediately trigger an exception on the device */
struct rpc_fault_request {
	struct infuse_rpc_req_header header;
	/** K_ERR_* fault type to trigger */
	uint8_t fault;
	/** Zero that the compiler doesn't know about */
	uint32_t zero;
} __packed;

struct rpc_fault_response {
	struct infuse_rpc_rsp_header header;
} __packed;

/** Get the current time knowledge of the device */
struct rpc_time_get_request {
	struct infuse_rpc_req_header header;
} __packed;

struct rpc_time_get_response {
	struct infuse_rpc_rsp_header header;
	/** Source of the time knowledge */
	uint8_t time_source;
	/** Current epoch time on the device */
	uint64_t epoch_time;
	/** How old the time knowledge is (seconds) */
	uint32_t sync_age;
} __packed;

/** Set the current time of the device */
struct rpc_time_set_request {
	struct infuse_rpc_req_header header;
	/** Current epoch time on the device */
	uint64_t epoch_time;
} __packed;

struct rpc_time_set_response {
	struct infuse_rpc_rsp_header header;
} __packed;

/** Write values to the KV store */
struct rpc_kv_write_request {
	struct infuse_rpc_req_header header;
	/** Number of values in buffer */
	uint8_t num;
	/** Array of KV values */
	struct rpc_struct_kv_store_value values[];
} __packed;

struct rpc_kv_write_response {
	struct infuse_rpc_rsp_header header;
	/** Result of writes */
	int16_t rc[];
} __packed;

/** Read values from the KV store */
struct rpc_kv_read_request {
	struct infuse_rpc_req_header header;
	/** Number of values to read */
	uint8_t num;
	/** Array of KV keys */
	uint16_t keys[];
} __packed;

struct rpc_kv_read_response {
	struct infuse_rpc_rsp_header header;
	/** Array of KV values */
	struct rpc_struct_kv_store_value values[];
} __packed;

/** Read KV store CRC's */
struct rpc_kv_reflect_crcs_request {
	struct infuse_rpc_req_header header;
	/** Number of CRCs to skip in response */
	uint16_t offset;
} __packed;

struct rpc_kv_reflect_crcs_response {
	struct infuse_rpc_rsp_header header;
	/** Number of CRCs in crcs array */
	uint16_t num;
	/** Number of CRCs that did not fit in this response */
	uint16_t remaining;
	/** Array of KV CRCs */
	struct rpc_struct_kv_store_crc crcs[];
} __packed;

/** Query current state of zbus channel */
struct rpc_zbus_channel_state_request {
	struct infuse_rpc_req_header header;
	/** Channel ID to query */
	uint32_t channel_id;
} __packed;

struct rpc_zbus_channel_state_response {
	struct infuse_rpc_rsp_header header;
	/** Epoch time of last data publish */
	uint64_t publish_timestamp;
	/** Number of times data has been published to channel */
	uint32_t publish_count;
	/** Average time between publishing */
	uint32_t publish_period_avg_ms;
	/** Channel data */
	uint8_t data[];
} __packed;

/** Query basic application versions and state */
struct rpc_application_info_request {
	struct infuse_rpc_req_header header;
} __packed;

struct rpc_application_info_response {
	struct infuse_rpc_rsp_header header;
	/** Application ID */
	uint32_t application_id;
	/** Application version number */
	struct rpc_struct_mcuboot_img_sem_ver version;
	/** Current Infuse network ID */
	uint32_t network_id;
	/** Application uptime */
	uint32_t uptime;
	/** Application reboot count */
	uint32_t reboots;
	/** Key-Value store reflect global CRC */
	uint32_t kv_crc;
	/** Data blocks logged to internal flash */
	uint32_t data_blocks_internal;
	/** Data blocks logged to external flash */
	uint32_t data_blocks_external;
} __packed;

/** Scan for WiFi networks */
struct rpc_wifi_scan_request {
	struct infuse_rpc_req_header header;
} __packed;

struct rpc_wifi_scan_response {
	struct infuse_rpc_rsp_header header;
	/** Number of scanned networks */
	uint8_t network_count;
	/** Array of scanned networks */
	struct rpc_struct_wifi_scan_result networks[];
} __packed;

/** Get current WiFi interface state */
struct rpc_wifi_state_request {
	struct infuse_rpc_req_header header;
} __packed;

struct rpc_wifi_state_response {
	struct infuse_rpc_rsp_header header;
	/** Common network state */
	struct rpc_struct_network_state common;
	/** WiFi state */
	struct rpc_struct_wifi_state wifi;
} __packed;

/** Retrieve information pertaining to the previous reboot */
struct rpc_last_reboot_request {
	struct infuse_rpc_req_header header;
} __packed;

struct rpc_last_reboot_response {
	struct infuse_rpc_rsp_header header;
	/** Reboot reason (enum infuse_reboot_reason) */
	uint8_t reason;
	/** Time source at reboot */
	uint8_t epoch_time_source;
	/** Epoch time at reboot */
	uint64_t epoch_time;
	/** Hardware flags (hwinfo_get_reset_cause) */
	uint32_t hardware_flags;
	/** Uptime before reboot (seconds) */
	uint32_t uptime;
	/** Program counter/Watchdog Info/Other */
	uint32_t param_1;
	/** Link Register/Watchdog Info/Other */
	uint32_t param_2;
	/** Running thread at reboot */
	char thread[8];
	/** Exception stack frame values */
	uint32_t esf[];
} __packed;

/** Get state of a data logger */
struct rpc_data_logger_state_request {
	struct infuse_rpc_req_header header;
	/** Data logger to read from */
	uint8_t logger;
} __packed;

struct rpc_data_logger_state_response {
	struct infuse_rpc_rsp_header header;
	/** Number of bytes logged since boot */
	uint64_t bytes_logged;
	/** Number of logical blocks on the logger */
	uint32_t logical_blocks;
	/** Number of physical blocks on the logger */
	uint32_t physical_blocks;
	/** Number of logical blocks present at boot */
	uint32_t boot_block;
	/** Number of logical blocks that have been written */
	uint32_t current_block;
	/** Earliest logical block that still exists on the logger */
	uint32_t earliest_block;
	/** Size of a single block in bytes */
	uint16_t block_size;
	/** Number of bytes at the start of the block that should not contain data */
	uint16_t block_overhead;
	/** Minimum erase unit of the logger in bytes */
	uint16_t erase_unit;
	/** Current application uptime */
	uint32_t uptime;
} __packed;

/** Read data from data logger */
struct rpc_data_logger_read_request {
	struct infuse_rpc_req_header header;
	struct infuse_rpc_req_data_header data_header;
	/** Data logger to read from */
	uint8_t logger;
	/** Block to start read from */
	uint32_t start_block;
	/** Last block to read from (UINT32_MAX == read to current block) */
	uint32_t last_block;
} __packed;

struct rpc_data_logger_read_response {
	struct infuse_rpc_rsp_header header;
	/** Number of bytes sent */
	uint32_t sent_len;
	/** CRC32 of bytes sent */
	uint32_t sent_crc;
} __packed;

/** Read arbitrary memory (NO ADDRESS VALIDATION PERFORMED) */
struct rpc_mem_read_request {
	struct infuse_rpc_req_header header;
	struct infuse_rpc_req_data_header data_header;
	/** Start address */
	uint32_t address;
} __packed;

struct rpc_mem_read_response {
	struct infuse_rpc_rsp_header header;
	/** Number of bytes sent */
	uint32_t sent_len;
	/** CRC32 of bytes sent */
	uint32_t sent_crc;
} __packed;

/** Read current Infuse-IoT application states */
struct rpc_infuse_states_query_request {
	struct infuse_rpc_req_header header;
	/** Ignore first N states before populating the output */
	uint8_t offset;
} __packed;

struct rpc_infuse_states_query_response {
	struct infuse_rpc_rsp_header header;
	/** Additional states that were not queried */
	uint8_t remaining;
	/** Currently set states (Timeout 0 == permanent) */
	struct rpc_struct_infuse_state states[];
} __packed;

/** Update Infuse-IoT application states */
struct rpc_infuse_states_update_request {
	struct infuse_rpc_req_header header;
	/** Number of states to update */
	uint8_t num;
	/** States to update (Timeout 0 == permanent, UINT16_MAX == clear) */
	struct rpc_struct_infuse_state states[];
} __packed;

struct rpc_infuse_states_update_response {
	struct infuse_rpc_rsp_header header;
} __packed;

/** Erase all data from a data logger */
struct rpc_data_logger_erase_request {
	struct infuse_rpc_req_header header;
	/** Data logger to erase */
	uint8_t logger;
	/** Erase entire logger space, even empty blocks */
	uint8_t erase_empty;
} __packed;

struct rpc_data_logger_erase_response {
	struct infuse_rpc_rsp_header header;
} __packed;

/** Query stats of heaps */
struct rpc_heap_stats_request {
	struct infuse_rpc_req_header header;
} __packed;

struct rpc_heap_stats_response {
	struct infuse_rpc_rsp_header header;
	/** Current statistics of application heaps */
	struct rpc_struct_heap_info stats[];
} __packed;

/** Run AT command against LTE modem */
struct rpc_lte_at_cmd_request {
	struct infuse_rpc_req_header header;
	/** AT command string */
	char cmd[];
} __packed;

struct rpc_lte_at_cmd_response {
	struct infuse_rpc_rsp_header header;
	/** AT command response */
	char rsp[];
} __packed;

/** Get current LTE interface state */
struct rpc_lte_state_request {
	struct infuse_rpc_req_header header;
} __packed;

struct rpc_lte_state_response {
	struct infuse_rpc_rsp_header header;
	/** Common network state */
	struct rpc_struct_network_state common;
	/** LTE state */
	struct rpc_struct_lte_state lte;
} __packed;

/** Read data from data logger, with auto-updating start_block */
struct rpc_data_logger_read_available_request {
	struct infuse_rpc_req_header header;
	struct infuse_rpc_req_data_header data_header;
	/** Data logger to read from */
	uint8_t logger;
	/** Desired block to start read from */
	uint32_t start_block;
	/** Maximum number of blocks to read */
	uint32_t num_blocks;
} __packed;

struct rpc_data_logger_read_available_response {
	struct infuse_rpc_rsp_header header;
	/** Number of bytes sent */
	uint32_t sent_len;
	/** CRC32 of bytes sent */
	uint32_t sent_crc;
	/** Current block after read completes */
	uint32_t current_block;
	/** Actual block that read started at */
	uint32_t start_block_actual;
	/** Size of a single block in bytes */
	uint16_t block_size;
} __packed;

/** Download a file from a COAP server (Infuse-IoT DTLS protected) */
struct rpc_coap_download_request {
	struct infuse_rpc_req_header header;
	/** COAP server address (e.g. coap.dev.infuse-iot.com) */
	char server_address[48];
	/** COAP server port */
	uint16_t server_port;
	/** COAP block timeout (Default 1000ms) */
	uint16_t block_timeout_ms;
	/** Action to apply to downloaded file */
	uint8_t action;
	/** Expected resource length (UINT32_MAX if unknown) */
	uint32_t resource_len;
	/** Expected resource CRC (UINT32_MAX if unknown) */
	uint32_t resource_crc;
	/** Path to file on COAP server (e.g. files/small_file) */
	char resource[];
} __packed;

struct rpc_coap_download_response {
	struct infuse_rpc_rsp_header header;
	/** Length of resource downloaded */
	uint32_t resource_len;
	/** CRC of resource downloaded */
	uint32_t resource_crc;
} __packed;

/** Network upload bandwidth testing using zperf/iperf */
struct rpc_zperf_upload_request {
	struct infuse_rpc_req_header header;
	/** Peer socket address */
	struct rpc_struct_sockaddr peer_address;
	/** SOCK_STREAM/SOCK_DGRAM */
	uint8_t sock_type;
	/** Source of data to upload */
	uint8_t data_source;
	/** Test duration in milliseconds */
	uint32_t duration_ms;
	/** Desired rate in kbps (0 for uncapped) */
	uint32_t rate_kbps;
	/** Packet size in bytes */
	uint16_t packet_size;
} __packed;

struct rpc_zperf_upload_response {
	struct infuse_rpc_rsp_header header;
	/** Number of packets sent */
	uint32_t nb_packets_sent;
	/** Number of packets received */
	uint32_t nb_packets_rcvd;
	/** Number of packets lost */
	uint32_t nb_packets_lost;
	/** Number of packets out of order */
	uint32_t nb_packets_outorder;
	/** Total length of the transferred data */
	uint64_t total_len;
	/** Total time of the transfer in microseconds */
	uint64_t time_in_us;
	/** Jitter in microseconds */
	uint32_t jitter_in_us;
	/** Client connection time in microsecond */
	uint64_t client_time_in_us;
	/** Packet size */
	uint32_t packet_size;
	/** Number of packet errors */
	uint32_t nb_packets_errors;
} __packed;

/** Write a file to the device */
struct rpc_file_write_basic_request {
	struct infuse_rpc_req_header header;
	struct infuse_rpc_req_data_header data_header;
	/** Action to apply to written file */
	uint8_t action;
	/** Expected file CRC */
	uint32_t file_crc;
} __packed;

struct rpc_file_write_basic_response {
	struct infuse_rpc_rsp_header header;
	/** Number of bytes received */
	uint32_t recv_len;
	/** CRC of bytes received */
	uint32_t recv_crc;
} __packed;

/** Write an annotation to the device */
struct rpc_annotate_request {
	struct infuse_rpc_req_header header;
	/** Data logger to write annotation to */
	uint8_t logger;
	/** Timestamp (GNSS seconds) that event was observed */
	uint32_t timestamp;
	/** Event string to write */
	char annotation[];
} __packed;

struct rpc_annotate_response {
	struct infuse_rpc_rsp_header header;
} __packed;

/** Connect to an Infuse-IoT Bluetooth device */
struct rpc_bt_connect_infuse_request {
	struct infuse_rpc_req_header header;
	/** Bluetooth LE device to connect to */
	struct rpc_struct_bt_addr_le peer;
	/** Connection timeout in milliseconds */
	uint16_t conn_timeout_ms;
	/** Chacteristics to subscribe to */
	uint8_t subscribe;
	/** Automatically terminate connection if no data traffic (0 = No timeout) */
	uint16_t inactivity_timeout_ms;
} __packed;

struct rpc_bt_connect_infuse_response {
	struct infuse_rpc_rsp_header header;
	/** Bluetooth device connected to */
	struct rpc_struct_bt_addr_le peer;
	/** Cloud public ECC key */
	uint8_t cloud_public_key[32];
	/** Device public ECC key */
	uint8_t device_public_key[32];
	/** Current network ID */
	uint32_t network_id;
} __packed;

/** Disconnect from a Bluetooth device */
struct rpc_bt_disconnect_request {
	struct infuse_rpc_req_header header;
	/** Bluetooth LE device to disconnect from */
	struct rpc_struct_bt_addr_le peer;
} __packed;

struct rpc_bt_disconnect_response {
	struct infuse_rpc_rsp_header header;
} __packed;

/** Copy a local file to a remote device over Bluetooth */
struct rpc_bt_file_copy_basic_request {
	struct infuse_rpc_req_header header;
	/** Bluetooth LE device to connect to */
	struct rpc_struct_bt_addr_le peer;
	/** Action to apply to copied file */
	uint8_t action;
	/** File index to copy */
	uint8_t file_idx;
	/** File length */
	uint32_t file_len;
	/** File CRC */
	uint32_t file_crc;
	/** ACK period for data copy over Bluetooth */
	uint8_t ack_period;
	/** Pipelining for the data copy */
	uint8_t pipelining;
} __packed;

struct rpc_bt_file_copy_basic_response {
	struct infuse_rpc_rsp_header header;
} __packed;

/** Copy a file fetched from COAP to a remote device over Bluetooth */
struct rpc_bt_file_copy_coap_request {
	struct infuse_rpc_req_header header;
	/** Bluetooth LE device to connect to */
	struct rpc_struct_bt_addr_le peer;
	/** Connection timeout in milliseconds */
	uint16_t conn_timeout_ms;
	/** Action to apply to copied file */
	uint8_t action;
	/** File index to use for storage */
	uint8_t file_idx;
	/** ACK period for data copy over Bluetooth */
	uint8_t ack_period;
	/** Pipelining for the data copy */
	uint8_t pipelining;
	/** COAP server address (e.g. coap.dev.infuse-iot.com) */
	char server_address[48];
	/** COAP server port */
	uint16_t server_port;
	/** COAP block timeout (Default 1000ms) */
	uint16_t block_timeout_ms;
	/** Expected resource length (UINT32_MAX if unknown) */
	uint32_t resource_len;
	/** Expected resource CRC (UINT32_MAX if unknown) */
	uint32_t resource_crc;
	/** Path to file on COAP server (e.g. files/small_file) */
	char resource[];
} __packed;

struct rpc_bt_file_copy_coap_response {
	struct infuse_rpc_rsp_header header;
	/** Length of resource downloaded from COAP */
	uint32_t resource_len;
	/** CRC of resource downloaded from COAP */
	uint32_t resource_crc;
} __packed;

/** Connect to a Bluetooth device and run the MCUMGR reboot command */
struct rpc_bt_mcumgr_reboot_request {
	struct infuse_rpc_req_header header;
	/** Bluetooth LE device to run reboot on */
	struct rpc_struct_bt_addr_le peer;
	/** Connection timeout in milliseconds */
	uint16_t conn_timeout_ms;
} __packed;

struct rpc_bt_mcumgr_reboot_response {
	struct infuse_rpc_rsp_header header;
} __packed;

/** Store the current accelerometer vector as the gravity reference */
struct rpc_gravity_reference_update_request {
	struct infuse_rpc_req_header header;
	/** Maximum axis variance to accept (0 == infinite) */
	uint16_t max_variance;
} __packed;

struct rpc_gravity_reference_update_response {
	struct infuse_rpc_rsp_header header;
	/** Updated reference vector */
	struct rpc_struct_xyz_s16 reference;
	/** Variance of measurements used for reference */
	struct rpc_struct_xyz_s16 variance;
	/** Number of samples used in the averaging */
	uint16_t num_samples;
	/** Period between samples */
	uint32_t sample_period_us;
} __packed;

/** Query current security state and validate identity */
struct rpc_security_state_request {
	struct infuse_rpc_req_header header;
	/** Random challenge data */
	uint8_t challenge[16];
} __packed;

struct rpc_security_state_response {
	struct infuse_rpc_rsp_header header;
	/** Cloud public ECC key */
	uint8_t cloud_public_key[32];
	/** Device public ECC key */
	uint8_t device_public_key[32];
	/** Current network ID */
	uint32_t network_id;
	/** Type of the challenge response */
	uint8_t challenge_response_type;
	/** Challenge response data */
	uint8_t challenge_response[];
} __packed;

/** Send multiple INFUSE_RPC_DATA packets */
struct rpc_data_sender_request {
	struct infuse_rpc_req_header header;
	struct infuse_rpc_req_data_header data_header;
} __packed;

struct rpc_data_sender_response {
	struct infuse_rpc_rsp_header header;
} __packed;

/** Receive multiple INFUSE_RPC_DATA packets */
struct rpc_data_receiver_request {
	struct infuse_rpc_req_header header;
	struct infuse_rpc_req_data_header data_header;
	/** Allow unaligned input data */
	uint8_t unaligned_input;
} __packed;

struct rpc_data_receiver_response {
	struct infuse_rpc_rsp_header header;
	/** Number of bytes received */
	uint32_t recv_len;
	/** CRC32 of bytes received */
	uint32_t recv_crc;
} __packed;

/** Echo any input data in the response */
struct rpc_echo_request {
	struct infuse_rpc_req_header header;
	/** Binary data */
	uint8_t array[];
} __packed;

struct rpc_echo_response {
	struct infuse_rpc_rsp_header header;
	/** Binary data */
	uint8_t array[];
} __packed;

/**
 * @}
 */

/* clang-format on */

#ifdef __cplusplus
}
#endif

#endif /* INFUSE_SDK_INCLUDE_GENERATED_RPC_TYPES_H_ */
