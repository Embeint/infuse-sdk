# Infuse-IoT SDK Bluetooth defaults

config INFUSE_SDK_BLUETOOTH
	bool "Infuse-IoT SDK Bluetooth defaults"
	depends on BT
	default y if INFUSE_SDK

if INFUSE_SDK_BLUETOOTH

configdefault BT_DEVICE_NAME
	default "Infuse-IoT"

# A dedicated workqueue for ECC crypto (that Infuse-IoT does not use by default)
# and GATT database hash (that only runs once on boot) is overkill. Disabling this
# workqueue saves >1kB of RAM.
configdefault BT_LONG_WQ
	default n

# Uncoded LE Data Packet Format:
#
# | Preamble | Access  |                           PDU (2 to 257 bytes)                         |   CRC   |
# |          | Address | LL Header |       Link Layer PDU (0 to 251 bytes)           |    MIC   |         |
# |          |         |           | L2CAP Header |      L2CAP PDU (0-247 bytes)     | Optional |         |
# |          |         |           |              |    ATT Header    |  ATT Payload  |          |         |
# |          |         |           |              | OpCode | Handle  |               |          |         |
# |  1 byte  | 4 bytes |  2 bytes  |   4 bytes    | 1 byte | 2 bytes | 0 - 244 bytes | 4 bytes  | 3 bytes |
#
# L2CAP can be larger than 247 bytes, but will be split across multiple LL packets as a result.
# ATT payloads can be larger than 244 bytes, but will be split across multiple LL packets as a result.
#
# Kconfig Symbols:
#     CONFIG_BT_CTLR_DATA_LENGTH_MAX : Maximum payload size of the Link Layer PDU
#     CONFIG_BT_BUF_ACL_TX_SIZE      : Maximum L2CAP PDU is limited to this value - 4
#     CONFIG_BT_BUF_ACL_RX_SIZE      : Maximum L2CAP PDU is limited to this value - 4
#     CONFIG_BT_L2CAP_TX_MTU         : Maximum L2CAP PDU size for transmission

configdefault BT_CTLR_DATA_LENGTH_MAX
	default 251
configdefault BT_BUF_ACL_TX_SIZE
	default 251
configdefault BT_BUF_ACL_RX_SIZE
	default 251
configdefault BT_L2CAP_TX_MTU
	default 246 if BT_SPI # SPI HCI can only handle 254 byte payloads (PDU - LL Header)
	default 247

# We expect our controllers to support the Zephyr vendor specific commands (read static address, etc)
configdefault BT_HCI_VS
	default y
# We want to support our own extended VS commands
configdefault BT_HCI_VS_EVT_USER
	default y

# Extended advertising is a requirement
configdefault BT_EXT_ADV
	default y
configdefault BT_EXT_ADV_MAX_ADV_SET
	default 2
configdefault BT_MAX_CONN
	default 2

# Maximum possible output power
configdefault BT_CTLR_TX_PWR_ANTENNA
	default 20

# TX Bluetooth advertising packets
configdefault BT_BROADCASTER
	default y
# RX Bluetooth Advertising packets
configdefault BT_OBSERVER
	default y
# Support being the target of a connection
configdefault BT_PERIPHERAL
	default y

# While extended advertising can support 255 bytes, iOS only supports 124 bytes
configdefault BT_CTLR_ADV_DATA_LEN_MAX
	default 124
configdefault BT_CTLR_SCAN_DATA_LEN_MAX
	default 124

# GATT central options
configdefault BT_GATT_CLIENT
	default y if BT_CENTRAL
configdefault BT_SCAN_AND_INITIATE_IN_PARALLEL
	default y
configdefault BT_CTLR_SDC_ALLOW_PARALLEL_SCANNING_AND_INITIATING
	default y

# Advertising happens on 2Mbit PHY, which is the desired PHY for connections
# due to the increased data throughput. However disabling the option to
# switch PHY's results in iPhones having problems connecting to devices.
configdefault BT_PHY_UPDATE
	default y
# But we don't want the PHY update to be triggered automatically by the peripheral
configdefault BT_AUTO_PHY_UPDATE
	default n

# Connection parameters should be pro-actively negotiated, not delayed by 5
# seconds as many connections are complete by then.
configdefault BT_GAP_AUTO_UPDATE_CONN_PARAMS
	default n

# Generic Sensor (0x015 << 6)
configdefault BT_DEVICE_APPEARANCE
	default 1344

# Querying the RSSI of connections can be useful
configdefault BT_CTLR_CONN_RSSI
	default y

endif # INFUSE_SDK_BLUETOOTH
